/*
Fatture in Cloud API v2 - API Reference

Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.

API version: 2.0.19
Contact: info@fattureincloud.it
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fattureincloud

import (
	"encoding/json"
	"fmt"
)

// DefaultPaymentTermsType Default payment terms.
type DefaultPaymentTermsType string

// List of DefaultPaymentTermsType
var DefaultPaymentTermsTypes = struct {
	STANDARD DefaultPaymentTermsType
	END_OF_MONTH DefaultPaymentTermsType
} {
	STANDARD: "standard",
	END_OF_MONTH: "end_of_month",
}

// All allowed values of DefaultPaymentTermsType enum
var AllowedDefaultPaymentTermsTypeEnumValues = []DefaultPaymentTermsType{
	"standard",
	"end_of_month",
}

func (v *DefaultPaymentTermsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DefaultPaymentTermsType(value)
	for _, existing := range AllowedDefaultPaymentTermsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DefaultPaymentTermsType", value)
}

// NewDefaultPaymentTermsTypeFromValue returns a pointer to a valid DefaultPaymentTermsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDefaultPaymentTermsTypeFromValue(v string) (*DefaultPaymentTermsType, error) {
	ev := DefaultPaymentTermsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DefaultPaymentTermsType: valid values are %v", v, AllowedDefaultPaymentTermsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DefaultPaymentTermsType) IsValid() bool {
	for _, existing := range AllowedDefaultPaymentTermsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DefaultPaymentTermsType value
func (v DefaultPaymentTermsType) Ptr() *DefaultPaymentTermsType {
	return &v
}

type NullableDefaultPaymentTermsType struct {
	value *DefaultPaymentTermsType
	isSet bool
}

func (v NullableDefaultPaymentTermsType) Get() *DefaultPaymentTermsType {
	return v.value
}

func (v *NullableDefaultPaymentTermsType) Set(val *DefaultPaymentTermsType) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultPaymentTermsType) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultPaymentTermsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultPaymentTermsType(val *DefaultPaymentTermsType) *NullableDefaultPaymentTermsType {
	return &NullableDefaultPaymentTermsType{value: val, isSet: true}
}

func (v NullableDefaultPaymentTermsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultPaymentTermsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

