/*
Fatture in Cloud API v2 - API Reference

Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.

API version: 2.1.5
Contact: info@fattureincloud.it
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

// IssuedDocumentStatus Issued document status
type IssuedDocumentStatus string

// List of IssuedDocumentStatus
var IssuedDocumentStatuses = struct {
	NOT_PAID IssuedDocumentStatus
	PAID IssuedDocumentStatus
	REVERSED IssuedDocumentStatus
} {
	NOT_PAID: "not_paid",
	PAID: "paid",
	REVERSED: "reversed",
}

// All allowed values of IssuedDocumentStatus enum
var AllowedIssuedDocumentStatusEnumValues = []IssuedDocumentStatus{
	"not_paid",
	"paid",
	"reversed",
}

func (v *IssuedDocumentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IssuedDocumentStatus(value)
	for _, existing := range AllowedIssuedDocumentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IssuedDocumentStatus", value)
}

// NewIssuedDocumentStatusFromValue returns a pointer to a valid IssuedDocumentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIssuedDocumentStatusFromValue(v string) (*IssuedDocumentStatus, error) {
	ev := IssuedDocumentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IssuedDocumentStatus: valid values are %v", v, AllowedIssuedDocumentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IssuedDocumentStatus) IsValid() bool {
	for _, existing := range AllowedIssuedDocumentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IssuedDocumentStatus value
func (v IssuedDocumentStatus) Ptr() *IssuedDocumentStatus {
	return &v
}

type NullableIssuedDocumentStatus struct {
	value *IssuedDocumentStatus
	isSet bool
}

func (v NullableIssuedDocumentStatus) Get() *IssuedDocumentStatus {
	return v.value
}

func (v *NullableIssuedDocumentStatus) Set(val *IssuedDocumentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuedDocumentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuedDocumentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuedDocumentStatus(val *IssuedDocumentStatus) *NullableIssuedDocumentStatus {
	return &NullableIssuedDocumentStatus{value: val, isSet: true}
}

func (v NullableIssuedDocumentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuedDocumentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

