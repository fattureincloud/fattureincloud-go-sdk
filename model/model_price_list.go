/*
Fatture in Cloud API v2 - API Reference

Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.

API version: 2.1.5
Contact: info@fattureincloud.it
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the PriceList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceList{}

// PriceList struct for PriceList
type PriceList struct {
	// Price list id
	Id NullableString `json:"id,omitempty"`
	// Price list name
	Name NullableString `json:"name,omitempty"`
	PricesType *PriceListPricesType `json:"prices_type,omitempty"`
	// This entity is default
	IsDefault NullableBool `json:"is_default,omitempty"`
	// Price list validity start date
	ValidFrom NullableString `json:"valid_from,omitempty"`
	// Price list validity end date
	ValidTo NullableString `json:"valid_to,omitempty"`
	Type *PriceListType `json:"type,omitempty"`
}

// NewPriceList instantiates a new PriceList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceList() *PriceList {
	this := PriceList{}
	return &this
}

// NewPriceListWithDefaults instantiates a new PriceList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceListWithDefaults() *PriceList {
	this := PriceList{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceList) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceList) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *PriceList) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *PriceList) SetId(v string) *PriceList {
	o.Id.Set(&v)
	return o
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *PriceList) SetIdNil() *PriceList {
	o.Id.Set(nil)
	return o
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *PriceList) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceList) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceList) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *PriceList) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *PriceList) SetName(v string) *PriceList {
	o.Name.Set(&v)
	return o
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *PriceList) SetNameNil() *PriceList {
	o.Name.Set(nil)
	return o
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *PriceList) UnsetName() {
	o.Name.Unset()
}

// GetPricesType returns the PricesType field value if set, zero value otherwise.
func (o *PriceList) GetPricesType() PriceListPricesType {
	if o == nil || IsNil(o.PricesType) {
		var ret PriceListPricesType
		return ret
	}
	return *o.PricesType
}

// GetPricesTypeOk returns a tuple with the PricesType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceList) GetPricesTypeOk() (*PriceListPricesType, bool) {
	if o == nil || IsNil(o.PricesType) {
		return nil, false
	}
	return o.PricesType, true
}

// HasPricesType returns a boolean if a field has been set.
func (o *PriceList) HasPricesType() bool {
	if o != nil && !IsNil(o.PricesType) {
		return true
	}

	return false
}

// SetPricesType gets a reference to the given PriceListPricesType and assigns it to the PricesType field.
func (o *PriceList) SetPricesType(v PriceListPricesType) *PriceList {
	o.PricesType = &v
	return o
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceList) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault.Get()) {
		var ret bool
		return ret
	}
	return *o.IsDefault.Get()
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceList) GetIsDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDefault.Get(), o.IsDefault.IsSet()
}

// HasIsDefault returns a boolean if a field has been set.
func (o *PriceList) HasIsDefault() bool {
	if o != nil && o.IsDefault.IsSet() {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given NullableBool and assigns it to the IsDefault field.
func (o *PriceList) SetIsDefault(v bool) *PriceList {
	o.IsDefault.Set(&v)
	return o
}
// SetIsDefaultNil sets the value for IsDefault to be an explicit nil
func (o *PriceList) SetIsDefaultNil() *PriceList {
	o.IsDefault.Set(nil)
	return o
}

// UnsetIsDefault ensures that no value is present for IsDefault, not even an explicit nil
func (o *PriceList) UnsetIsDefault() {
	o.IsDefault.Unset()
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceList) GetValidFrom() string {
	if o == nil || IsNil(o.ValidFrom.Get()) {
		var ret string
		return ret
	}
	return *o.ValidFrom.Get()
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceList) GetValidFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidFrom.Get(), o.ValidFrom.IsSet()
}

// HasValidFrom returns a boolean if a field has been set.
func (o *PriceList) HasValidFrom() bool {
	if o != nil && o.ValidFrom.IsSet() {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given NullableString and assigns it to the ValidFrom field.
func (o *PriceList) SetValidFrom(v string) *PriceList {
	o.ValidFrom.Set(&v)
	return o
}
// SetValidFromNil sets the value for ValidFrom to be an explicit nil
func (o *PriceList) SetValidFromNil() *PriceList {
	o.ValidFrom.Set(nil)
	return o
}

// UnsetValidFrom ensures that no value is present for ValidFrom, not even an explicit nil
func (o *PriceList) UnsetValidFrom() {
	o.ValidFrom.Unset()
}

// GetValidTo returns the ValidTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceList) GetValidTo() string {
	if o == nil || IsNil(o.ValidTo.Get()) {
		var ret string
		return ret
	}
	return *o.ValidTo.Get()
}

// GetValidToOk returns a tuple with the ValidTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceList) GetValidToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidTo.Get(), o.ValidTo.IsSet()
}

// HasValidTo returns a boolean if a field has been set.
func (o *PriceList) HasValidTo() bool {
	if o != nil && o.ValidTo.IsSet() {
		return true
	}

	return false
}

// SetValidTo gets a reference to the given NullableString and assigns it to the ValidTo field.
func (o *PriceList) SetValidTo(v string) *PriceList {
	o.ValidTo.Set(&v)
	return o
}
// SetValidToNil sets the value for ValidTo to be an explicit nil
func (o *PriceList) SetValidToNil() *PriceList {
	o.ValidTo.Set(nil)
	return o
}

// UnsetValidTo ensures that no value is present for ValidTo, not even an explicit nil
func (o *PriceList) UnsetValidTo() {
	o.ValidTo.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PriceList) GetType() PriceListType {
	if o == nil || IsNil(o.Type) {
		var ret PriceListType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceList) GetTypeOk() (*PriceListType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PriceList) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given PriceListType and assigns it to the Type field.
func (o *PriceList) SetType(v PriceListType) *PriceList {
	o.Type = &v
	return o
}

func (o PriceList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.PricesType) {
		toSerialize["prices_type"] = o.PricesType
	}
	if o.IsDefault.IsSet() {
		toSerialize["is_default"] = o.IsDefault.Get()
	}
	if o.ValidFrom.IsSet() {
		toSerialize["valid_from"] = o.ValidFrom.Get()
	}
	if o.ValidTo.IsSet() {
		toSerialize["valid_to"] = o.ValidTo.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullablePriceList struct {
	value *PriceList
	isSet bool
}

func (v NullablePriceList) Get() *PriceList {
	return v.value
}

func (v *NullablePriceList) Set(val *PriceList) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceList) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceList(val *PriceList) *NullablePriceList {
	return &NullablePriceList{value: val, isSet: true}
}

func (v NullablePriceList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


