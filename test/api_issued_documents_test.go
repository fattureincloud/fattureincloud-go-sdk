/*
Fatture in Cloud API v2 - API Reference

Testing IssuedDocumentsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fattureincloud

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    fattureincloud "./openapi"
)

func Test_fattureincloud_IssuedDocumentsApiService(t *testing.T) {

    configuration := fattureincloud.NewConfiguration()
    apiClient := fattureincloud.NewAPIClient(configuration)

    t.Run("Test IssuedDocumentsApiService CreateIssuedDocument", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.IssuedDocumentsApi.CreateIssuedDocument(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IssuedDocumentsApiService DeleteIssuedDocument", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var documentId int32

        resp, httpRes, err := apiClient.IssuedDocumentsApi.DeleteIssuedDocument(context.Background(), companyId, documentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IssuedDocumentsApiService DeleteIssuedDocumentAttachment", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var documentId int32

        resp, httpRes, err := apiClient.IssuedDocumentsApi.DeleteIssuedDocumentAttachment(context.Background(), companyId, documentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IssuedDocumentsApiService GetEmailData", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var documentId int32

        resp, httpRes, err := apiClient.IssuedDocumentsApi.GetEmailData(context.Background(), companyId, documentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IssuedDocumentsApiService GetExistingIssuedDocumentTotals", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var documentId int32

        resp, httpRes, err := apiClient.IssuedDocumentsApi.GetExistingIssuedDocumentTotals(context.Background(), companyId, documentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IssuedDocumentsApiService GetIssuedDocument", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var documentId int32

        resp, httpRes, err := apiClient.IssuedDocumentsApi.GetIssuedDocument(context.Background(), companyId, documentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IssuedDocumentsApiService GetIssuedDocumentPreCreateInfo", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.IssuedDocumentsApi.GetIssuedDocumentPreCreateInfo(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IssuedDocumentsApiService GetNewIssuedDocumentTotals", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.IssuedDocumentsApi.GetNewIssuedDocumentTotals(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IssuedDocumentsApiService JoinIssuedDocuments", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.IssuedDocumentsApi.JoinIssuedDocuments(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IssuedDocumentsApiService ListIssuedDocuments", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.IssuedDocumentsApi.ListIssuedDocuments(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IssuedDocumentsApiService ModifyIssuedDocument", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var documentId int32

        resp, httpRes, err := apiClient.IssuedDocumentsApi.ModifyIssuedDocument(context.Background(), companyId, documentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IssuedDocumentsApiService ScheduleEmail", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var documentId int32

        resp, httpRes, err := apiClient.IssuedDocumentsApi.ScheduleEmail(context.Background(), companyId, documentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IssuedDocumentsApiService TransformIssuedDocument", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.IssuedDocumentsApi.TransformIssuedDocument(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IssuedDocumentsApiService UploadIssuedDocumentAttachment", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.IssuedDocumentsApi.UploadIssuedDocumentAttachment(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
