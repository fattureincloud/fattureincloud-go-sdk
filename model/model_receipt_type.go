/*
Fatture in Cloud API v2 - API Reference

Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.

API version: 2.0.26
Contact: info@fattureincloud.it
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

// ReceiptType Receipt type.
type ReceiptType string

// List of ReceiptType
var ReceiptTypes = struct {
	TILL_RECEIPT ReceiptType
	SALES_RECEIPT ReceiptType
} {
	TILL_RECEIPT: "till_receipt",
	SALES_RECEIPT: "sales_receipt",
}

// All allowed values of ReceiptType enum
var AllowedReceiptTypeEnumValues = []ReceiptType{
	"till_receipt",
	"sales_receipt",
}

func (v *ReceiptType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReceiptType(value)
	for _, existing := range AllowedReceiptTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReceiptType", value)
}

// NewReceiptTypeFromValue returns a pointer to a valid ReceiptType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReceiptTypeFromValue(v string) (*ReceiptType, error) {
	ev := ReceiptType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReceiptType: valid values are %v", v, AllowedReceiptTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReceiptType) IsValid() bool {
	for _, existing := range AllowedReceiptTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReceiptType value
func (v ReceiptType) Ptr() *ReceiptType {
	return &v
}

type NullableReceiptType struct {
	value *ReceiptType
	isSet bool
}

func (v NullableReceiptType) Get() *ReceiptType {
	return v.value
}

func (v *NullableReceiptType) Set(val *ReceiptType) {
	v.value = val
	v.isSet = true
}

func (v NullableReceiptType) IsSet() bool {
	return v.isSet
}

func (v *NullableReceiptType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReceiptType(val *ReceiptType) *NullableReceiptType {
	return &NullableReceiptType{value: val, isSet: true}
}

func (v NullableReceiptType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReceiptType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

