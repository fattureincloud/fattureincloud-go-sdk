/*
Fatture in Cloud API v2 - API Reference

Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.

API version: 2.1.3
Contact: info@fattureincloud.it
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the TaxProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxProfile{}

// TaxProfile struct for TaxProfile
type TaxProfile struct {
	// The company type
	CompanyType NullableString `json:"company_type,omitempty"`
	// The company subtype
	CompanySubtype NullableString `json:"company_subtype,omitempty"`
	// The profession
	Profession NullableString `json:"profession,omitempty"`
	// The applied regime
	Regime NullableString `json:"regime,omitempty"`
	// The name of the rivalsa
	RivalsaName NullableString `json:"rivalsa_name,omitempty"`
	// The default rivalsa amount
	DefaultRivalsa NullableFloat32 `json:"default_rivalsa,omitempty"`
	// The name of the cassa
	CassaName NullableString `json:"cassa_name,omitempty"`
	// The default cassa amount
	DefaultCassa NullableFloat32 `json:"default_cassa,omitempty"`
	// The default taxable amount for the cassa
	DefaultCassaTaxable NullableFloat32 `json:"default_cassa_taxable,omitempty"`
	// The name of the second cassa
	Cassa2Name NullableString `json:"cassa2_name,omitempty"`
	// The default second cassa amount
	DefaultCassa2 NullableFloat32 `json:"default_cassa2,omitempty"`
	// The default taxable amount for the second cassa
	DefaultCassa2Taxable NullableFloat32 `json:"default_cassa2_taxable,omitempty"`
	// The default withholding tax
	DefaultWithholdingTax NullableFloat32 `json:"default_withholding_tax,omitempty"`
	// The default taxable amount for the withholding tax
	DefaultWithholdingTaxTaxable NullableFloat32 `json:"default_withholding_tax_taxable,omitempty"`
	// The default other withholding tax
	DefaultOtherWithholdingTax NullableFloat32 `json:"default_other_withholding_tax,omitempty"`
	// If it has enasarco
	Enasarco NullableBool `json:"enasarco,omitempty"`
	// The enasarco type
	EnasarcoType NullableString `json:"enasarco_type,omitempty"`
	// The contributions percentage
	ContributionsPercentage NullableFloat32 `json:"contributions_percentage,omitempty"`
	// The profit coefficient
	ProfitCoefficient NullableFloat32 `json:"profit_coefficient,omitempty"`
	// If the health card system is active
	Med NullableBool `json:"med,omitempty"`
	DefaultVat NullableVatType `json:"default_vat,omitempty"`
}

// NewTaxProfile instantiates a new TaxProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxProfile() *TaxProfile {
	this := TaxProfile{}
	return &this
}

// NewTaxProfileWithDefaults instantiates a new TaxProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxProfileWithDefaults() *TaxProfile {
	this := TaxProfile{}
	return &this
}

// GetCompanyType returns the CompanyType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetCompanyType() string {
	if o == nil || IsNil(o.CompanyType.Get()) {
		var ret string
		return ret
	}
	return *o.CompanyType.Get()
}

// GetCompanyTypeOk returns a tuple with the CompanyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetCompanyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompanyType.Get(), o.CompanyType.IsSet()
}

// HasCompanyType returns a boolean if a field has been set.
func (o *TaxProfile) HasCompanyType() bool {
	if o != nil && o.CompanyType.IsSet() {
		return true
	}

	return false
}

// SetCompanyType gets a reference to the given NullableString and assigns it to the CompanyType field.
func (o *TaxProfile) SetCompanyType(v string) *TaxProfile {
	o.CompanyType.Set(&v)
		return o
}
// SetCompanyTypeNil sets the value for CompanyType to be an explicit nil
func (o *TaxProfile) SetCompanyTypeNil() *TaxProfile {
	o.CompanyType.Set(nil)
	return o
}

// UnsetCompanyType ensures that no value is present for CompanyType, not even an explicit nil
func (o *TaxProfile) UnsetCompanyType() {
	o.CompanyType.Unset()
}

// GetCompanySubtype returns the CompanySubtype field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetCompanySubtype() string {
	if o == nil || IsNil(o.CompanySubtype.Get()) {
		var ret string
		return ret
	}
	return *o.CompanySubtype.Get()
}

// GetCompanySubtypeOk returns a tuple with the CompanySubtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetCompanySubtypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompanySubtype.Get(), o.CompanySubtype.IsSet()
}

// HasCompanySubtype returns a boolean if a field has been set.
func (o *TaxProfile) HasCompanySubtype() bool {
	if o != nil && o.CompanySubtype.IsSet() {
		return true
	}

	return false
}

// SetCompanySubtype gets a reference to the given NullableString and assigns it to the CompanySubtype field.
func (o *TaxProfile) SetCompanySubtype(v string) *TaxProfile {
	o.CompanySubtype.Set(&v)
		return o
}
// SetCompanySubtypeNil sets the value for CompanySubtype to be an explicit nil
func (o *TaxProfile) SetCompanySubtypeNil() *TaxProfile {
	o.CompanySubtype.Set(nil)
	return o
}

// UnsetCompanySubtype ensures that no value is present for CompanySubtype, not even an explicit nil
func (o *TaxProfile) UnsetCompanySubtype() {
	o.CompanySubtype.Unset()
}

// GetProfession returns the Profession field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetProfession() string {
	if o == nil || IsNil(o.Profession.Get()) {
		var ret string
		return ret
	}
	return *o.Profession.Get()
}

// GetProfessionOk returns a tuple with the Profession field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetProfessionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Profession.Get(), o.Profession.IsSet()
}

// HasProfession returns a boolean if a field has been set.
func (o *TaxProfile) HasProfession() bool {
	if o != nil && o.Profession.IsSet() {
		return true
	}

	return false
}

// SetProfession gets a reference to the given NullableString and assigns it to the Profession field.
func (o *TaxProfile) SetProfession(v string) *TaxProfile {
	o.Profession.Set(&v)
		return o
}
// SetProfessionNil sets the value for Profession to be an explicit nil
func (o *TaxProfile) SetProfessionNil() *TaxProfile {
	o.Profession.Set(nil)
	return o
}

// UnsetProfession ensures that no value is present for Profession, not even an explicit nil
func (o *TaxProfile) UnsetProfession() {
	o.Profession.Unset()
}

// GetRegime returns the Regime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetRegime() string {
	if o == nil || IsNil(o.Regime.Get()) {
		var ret string
		return ret
	}
	return *o.Regime.Get()
}

// GetRegimeOk returns a tuple with the Regime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetRegimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Regime.Get(), o.Regime.IsSet()
}

// HasRegime returns a boolean if a field has been set.
func (o *TaxProfile) HasRegime() bool {
	if o != nil && o.Regime.IsSet() {
		return true
	}

	return false
}

// SetRegime gets a reference to the given NullableString and assigns it to the Regime field.
func (o *TaxProfile) SetRegime(v string) *TaxProfile {
	o.Regime.Set(&v)
		return o
}
// SetRegimeNil sets the value for Regime to be an explicit nil
func (o *TaxProfile) SetRegimeNil() *TaxProfile {
	o.Regime.Set(nil)
	return o
}

// UnsetRegime ensures that no value is present for Regime, not even an explicit nil
func (o *TaxProfile) UnsetRegime() {
	o.Regime.Unset()
}

// GetRivalsaName returns the RivalsaName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetRivalsaName() string {
	if o == nil || IsNil(o.RivalsaName.Get()) {
		var ret string
		return ret
	}
	return *o.RivalsaName.Get()
}

// GetRivalsaNameOk returns a tuple with the RivalsaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetRivalsaNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RivalsaName.Get(), o.RivalsaName.IsSet()
}

// HasRivalsaName returns a boolean if a field has been set.
func (o *TaxProfile) HasRivalsaName() bool {
	if o != nil && o.RivalsaName.IsSet() {
		return true
	}

	return false
}

// SetRivalsaName gets a reference to the given NullableString and assigns it to the RivalsaName field.
func (o *TaxProfile) SetRivalsaName(v string) *TaxProfile {
	o.RivalsaName.Set(&v)
		return o
}
// SetRivalsaNameNil sets the value for RivalsaName to be an explicit nil
func (o *TaxProfile) SetRivalsaNameNil() *TaxProfile {
	o.RivalsaName.Set(nil)
	return o
}

// UnsetRivalsaName ensures that no value is present for RivalsaName, not even an explicit nil
func (o *TaxProfile) UnsetRivalsaName() {
	o.RivalsaName.Unset()
}

// GetDefaultRivalsa returns the DefaultRivalsa field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetDefaultRivalsa() float32 {
	if o == nil || IsNil(o.DefaultRivalsa.Get()) {
		var ret float32
		return ret
	}
	return *o.DefaultRivalsa.Get()
}

// GetDefaultRivalsaOk returns a tuple with the DefaultRivalsa field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetDefaultRivalsaOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultRivalsa.Get(), o.DefaultRivalsa.IsSet()
}

// HasDefaultRivalsa returns a boolean if a field has been set.
func (o *TaxProfile) HasDefaultRivalsa() bool {
	if o != nil && o.DefaultRivalsa.IsSet() {
		return true
	}

	return false
}

// SetDefaultRivalsa gets a reference to the given NullableFloat32 and assigns it to the DefaultRivalsa field.
func (o *TaxProfile) SetDefaultRivalsa(v float32) *TaxProfile {
	o.DefaultRivalsa.Set(&v)
		return o
}
// SetDefaultRivalsaNil sets the value for DefaultRivalsa to be an explicit nil
func (o *TaxProfile) SetDefaultRivalsaNil() *TaxProfile {
	o.DefaultRivalsa.Set(nil)
	return o
}

// UnsetDefaultRivalsa ensures that no value is present for DefaultRivalsa, not even an explicit nil
func (o *TaxProfile) UnsetDefaultRivalsa() {
	o.DefaultRivalsa.Unset()
}

// GetCassaName returns the CassaName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetCassaName() string {
	if o == nil || IsNil(o.CassaName.Get()) {
		var ret string
		return ret
	}
	return *o.CassaName.Get()
}

// GetCassaNameOk returns a tuple with the CassaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetCassaNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CassaName.Get(), o.CassaName.IsSet()
}

// HasCassaName returns a boolean if a field has been set.
func (o *TaxProfile) HasCassaName() bool {
	if o != nil && o.CassaName.IsSet() {
		return true
	}

	return false
}

// SetCassaName gets a reference to the given NullableString and assigns it to the CassaName field.
func (o *TaxProfile) SetCassaName(v string) *TaxProfile {
	o.CassaName.Set(&v)
		return o
}
// SetCassaNameNil sets the value for CassaName to be an explicit nil
func (o *TaxProfile) SetCassaNameNil() *TaxProfile {
	o.CassaName.Set(nil)
	return o
}

// UnsetCassaName ensures that no value is present for CassaName, not even an explicit nil
func (o *TaxProfile) UnsetCassaName() {
	o.CassaName.Unset()
}

// GetDefaultCassa returns the DefaultCassa field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetDefaultCassa() float32 {
	if o == nil || IsNil(o.DefaultCassa.Get()) {
		var ret float32
		return ret
	}
	return *o.DefaultCassa.Get()
}

// GetDefaultCassaOk returns a tuple with the DefaultCassa field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetDefaultCassaOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultCassa.Get(), o.DefaultCassa.IsSet()
}

// HasDefaultCassa returns a boolean if a field has been set.
func (o *TaxProfile) HasDefaultCassa() bool {
	if o != nil && o.DefaultCassa.IsSet() {
		return true
	}

	return false
}

// SetDefaultCassa gets a reference to the given NullableFloat32 and assigns it to the DefaultCassa field.
func (o *TaxProfile) SetDefaultCassa(v float32) *TaxProfile {
	o.DefaultCassa.Set(&v)
		return o
}
// SetDefaultCassaNil sets the value for DefaultCassa to be an explicit nil
func (o *TaxProfile) SetDefaultCassaNil() *TaxProfile {
	o.DefaultCassa.Set(nil)
	return o
}

// UnsetDefaultCassa ensures that no value is present for DefaultCassa, not even an explicit nil
func (o *TaxProfile) UnsetDefaultCassa() {
	o.DefaultCassa.Unset()
}

// GetDefaultCassaTaxable returns the DefaultCassaTaxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetDefaultCassaTaxable() float32 {
	if o == nil || IsNil(o.DefaultCassaTaxable.Get()) {
		var ret float32
		return ret
	}
	return *o.DefaultCassaTaxable.Get()
}

// GetDefaultCassaTaxableOk returns a tuple with the DefaultCassaTaxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetDefaultCassaTaxableOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultCassaTaxable.Get(), o.DefaultCassaTaxable.IsSet()
}

// HasDefaultCassaTaxable returns a boolean if a field has been set.
func (o *TaxProfile) HasDefaultCassaTaxable() bool {
	if o != nil && o.DefaultCassaTaxable.IsSet() {
		return true
	}

	return false
}

// SetDefaultCassaTaxable gets a reference to the given NullableFloat32 and assigns it to the DefaultCassaTaxable field.
func (o *TaxProfile) SetDefaultCassaTaxable(v float32) *TaxProfile {
	o.DefaultCassaTaxable.Set(&v)
		return o
}
// SetDefaultCassaTaxableNil sets the value for DefaultCassaTaxable to be an explicit nil
func (o *TaxProfile) SetDefaultCassaTaxableNil() *TaxProfile {
	o.DefaultCassaTaxable.Set(nil)
	return o
}

// UnsetDefaultCassaTaxable ensures that no value is present for DefaultCassaTaxable, not even an explicit nil
func (o *TaxProfile) UnsetDefaultCassaTaxable() {
	o.DefaultCassaTaxable.Unset()
}

// GetCassa2Name returns the Cassa2Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetCassa2Name() string {
	if o == nil || IsNil(o.Cassa2Name.Get()) {
		var ret string
		return ret
	}
	return *o.Cassa2Name.Get()
}

// GetCassa2NameOk returns a tuple with the Cassa2Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetCassa2NameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cassa2Name.Get(), o.Cassa2Name.IsSet()
}

// HasCassa2Name returns a boolean if a field has been set.
func (o *TaxProfile) HasCassa2Name() bool {
	if o != nil && o.Cassa2Name.IsSet() {
		return true
	}

	return false
}

// SetCassa2Name gets a reference to the given NullableString and assigns it to the Cassa2Name field.
func (o *TaxProfile) SetCassa2Name(v string) *TaxProfile {
	o.Cassa2Name.Set(&v)
		return o
}
// SetCassa2NameNil sets the value for Cassa2Name to be an explicit nil
func (o *TaxProfile) SetCassa2NameNil() *TaxProfile {
	o.Cassa2Name.Set(nil)
	return o
}

// UnsetCassa2Name ensures that no value is present for Cassa2Name, not even an explicit nil
func (o *TaxProfile) UnsetCassa2Name() {
	o.Cassa2Name.Unset()
}

// GetDefaultCassa2 returns the DefaultCassa2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetDefaultCassa2() float32 {
	if o == nil || IsNil(o.DefaultCassa2.Get()) {
		var ret float32
		return ret
	}
	return *o.DefaultCassa2.Get()
}

// GetDefaultCassa2Ok returns a tuple with the DefaultCassa2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetDefaultCassa2Ok() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultCassa2.Get(), o.DefaultCassa2.IsSet()
}

// HasDefaultCassa2 returns a boolean if a field has been set.
func (o *TaxProfile) HasDefaultCassa2() bool {
	if o != nil && o.DefaultCassa2.IsSet() {
		return true
	}

	return false
}

// SetDefaultCassa2 gets a reference to the given NullableFloat32 and assigns it to the DefaultCassa2 field.
func (o *TaxProfile) SetDefaultCassa2(v float32) *TaxProfile {
	o.DefaultCassa2.Set(&v)
		return o
}
// SetDefaultCassa2Nil sets the value for DefaultCassa2 to be an explicit nil
func (o *TaxProfile) SetDefaultCassa2Nil() *TaxProfile {
	o.DefaultCassa2.Set(nil)
	return o
}

// UnsetDefaultCassa2 ensures that no value is present for DefaultCassa2, not even an explicit nil
func (o *TaxProfile) UnsetDefaultCassa2() {
	o.DefaultCassa2.Unset()
}

// GetDefaultCassa2Taxable returns the DefaultCassa2Taxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetDefaultCassa2Taxable() float32 {
	if o == nil || IsNil(o.DefaultCassa2Taxable.Get()) {
		var ret float32
		return ret
	}
	return *o.DefaultCassa2Taxable.Get()
}

// GetDefaultCassa2TaxableOk returns a tuple with the DefaultCassa2Taxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetDefaultCassa2TaxableOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultCassa2Taxable.Get(), o.DefaultCassa2Taxable.IsSet()
}

// HasDefaultCassa2Taxable returns a boolean if a field has been set.
func (o *TaxProfile) HasDefaultCassa2Taxable() bool {
	if o != nil && o.DefaultCassa2Taxable.IsSet() {
		return true
	}

	return false
}

// SetDefaultCassa2Taxable gets a reference to the given NullableFloat32 and assigns it to the DefaultCassa2Taxable field.
func (o *TaxProfile) SetDefaultCassa2Taxable(v float32) *TaxProfile {
	o.DefaultCassa2Taxable.Set(&v)
		return o
}
// SetDefaultCassa2TaxableNil sets the value for DefaultCassa2Taxable to be an explicit nil
func (o *TaxProfile) SetDefaultCassa2TaxableNil() *TaxProfile {
	o.DefaultCassa2Taxable.Set(nil)
	return o
}

// UnsetDefaultCassa2Taxable ensures that no value is present for DefaultCassa2Taxable, not even an explicit nil
func (o *TaxProfile) UnsetDefaultCassa2Taxable() {
	o.DefaultCassa2Taxable.Unset()
}

// GetDefaultWithholdingTax returns the DefaultWithholdingTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetDefaultWithholdingTax() float32 {
	if o == nil || IsNil(o.DefaultWithholdingTax.Get()) {
		var ret float32
		return ret
	}
	return *o.DefaultWithholdingTax.Get()
}

// GetDefaultWithholdingTaxOk returns a tuple with the DefaultWithholdingTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetDefaultWithholdingTaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultWithholdingTax.Get(), o.DefaultWithholdingTax.IsSet()
}

// HasDefaultWithholdingTax returns a boolean if a field has been set.
func (o *TaxProfile) HasDefaultWithholdingTax() bool {
	if o != nil && o.DefaultWithholdingTax.IsSet() {
		return true
	}

	return false
}

// SetDefaultWithholdingTax gets a reference to the given NullableFloat32 and assigns it to the DefaultWithholdingTax field.
func (o *TaxProfile) SetDefaultWithholdingTax(v float32) *TaxProfile {
	o.DefaultWithholdingTax.Set(&v)
		return o
}
// SetDefaultWithholdingTaxNil sets the value for DefaultWithholdingTax to be an explicit nil
func (o *TaxProfile) SetDefaultWithholdingTaxNil() *TaxProfile {
	o.DefaultWithholdingTax.Set(nil)
	return o
}

// UnsetDefaultWithholdingTax ensures that no value is present for DefaultWithholdingTax, not even an explicit nil
func (o *TaxProfile) UnsetDefaultWithholdingTax() {
	o.DefaultWithholdingTax.Unset()
}

// GetDefaultWithholdingTaxTaxable returns the DefaultWithholdingTaxTaxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetDefaultWithholdingTaxTaxable() float32 {
	if o == nil || IsNil(o.DefaultWithholdingTaxTaxable.Get()) {
		var ret float32
		return ret
	}
	return *o.DefaultWithholdingTaxTaxable.Get()
}

// GetDefaultWithholdingTaxTaxableOk returns a tuple with the DefaultWithholdingTaxTaxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetDefaultWithholdingTaxTaxableOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultWithholdingTaxTaxable.Get(), o.DefaultWithholdingTaxTaxable.IsSet()
}

// HasDefaultWithholdingTaxTaxable returns a boolean if a field has been set.
func (o *TaxProfile) HasDefaultWithholdingTaxTaxable() bool {
	if o != nil && o.DefaultWithholdingTaxTaxable.IsSet() {
		return true
	}

	return false
}

// SetDefaultWithholdingTaxTaxable gets a reference to the given NullableFloat32 and assigns it to the DefaultWithholdingTaxTaxable field.
func (o *TaxProfile) SetDefaultWithholdingTaxTaxable(v float32) *TaxProfile {
	o.DefaultWithholdingTaxTaxable.Set(&v)
		return o
}
// SetDefaultWithholdingTaxTaxableNil sets the value for DefaultWithholdingTaxTaxable to be an explicit nil
func (o *TaxProfile) SetDefaultWithholdingTaxTaxableNil() *TaxProfile {
	o.DefaultWithholdingTaxTaxable.Set(nil)
	return o
}

// UnsetDefaultWithholdingTaxTaxable ensures that no value is present for DefaultWithholdingTaxTaxable, not even an explicit nil
func (o *TaxProfile) UnsetDefaultWithholdingTaxTaxable() {
	o.DefaultWithholdingTaxTaxable.Unset()
}

// GetDefaultOtherWithholdingTax returns the DefaultOtherWithholdingTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetDefaultOtherWithholdingTax() float32 {
	if o == nil || IsNil(o.DefaultOtherWithholdingTax.Get()) {
		var ret float32
		return ret
	}
	return *o.DefaultOtherWithholdingTax.Get()
}

// GetDefaultOtherWithholdingTaxOk returns a tuple with the DefaultOtherWithholdingTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetDefaultOtherWithholdingTaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultOtherWithholdingTax.Get(), o.DefaultOtherWithholdingTax.IsSet()
}

// HasDefaultOtherWithholdingTax returns a boolean if a field has been set.
func (o *TaxProfile) HasDefaultOtherWithholdingTax() bool {
	if o != nil && o.DefaultOtherWithholdingTax.IsSet() {
		return true
	}

	return false
}

// SetDefaultOtherWithholdingTax gets a reference to the given NullableFloat32 and assigns it to the DefaultOtherWithholdingTax field.
func (o *TaxProfile) SetDefaultOtherWithholdingTax(v float32) *TaxProfile {
	o.DefaultOtherWithholdingTax.Set(&v)
		return o
}
// SetDefaultOtherWithholdingTaxNil sets the value for DefaultOtherWithholdingTax to be an explicit nil
func (o *TaxProfile) SetDefaultOtherWithholdingTaxNil() *TaxProfile {
	o.DefaultOtherWithholdingTax.Set(nil)
	return o
}

// UnsetDefaultOtherWithholdingTax ensures that no value is present for DefaultOtherWithholdingTax, not even an explicit nil
func (o *TaxProfile) UnsetDefaultOtherWithholdingTax() {
	o.DefaultOtherWithholdingTax.Unset()
}

// GetEnasarco returns the Enasarco field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetEnasarco() bool {
	if o == nil || IsNil(o.Enasarco.Get()) {
		var ret bool
		return ret
	}
	return *o.Enasarco.Get()
}

// GetEnasarcoOk returns a tuple with the Enasarco field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetEnasarcoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enasarco.Get(), o.Enasarco.IsSet()
}

// HasEnasarco returns a boolean if a field has been set.
func (o *TaxProfile) HasEnasarco() bool {
	if o != nil && o.Enasarco.IsSet() {
		return true
	}

	return false
}

// SetEnasarco gets a reference to the given NullableBool and assigns it to the Enasarco field.
func (o *TaxProfile) SetEnasarco(v bool) *TaxProfile {
	o.Enasarco.Set(&v)
		return o
}
// SetEnasarcoNil sets the value for Enasarco to be an explicit nil
func (o *TaxProfile) SetEnasarcoNil() *TaxProfile {
	o.Enasarco.Set(nil)
	return o
}

// UnsetEnasarco ensures that no value is present for Enasarco, not even an explicit nil
func (o *TaxProfile) UnsetEnasarco() {
	o.Enasarco.Unset()
}

// GetEnasarcoType returns the EnasarcoType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetEnasarcoType() string {
	if o == nil || IsNil(o.EnasarcoType.Get()) {
		var ret string
		return ret
	}
	return *o.EnasarcoType.Get()
}

// GetEnasarcoTypeOk returns a tuple with the EnasarcoType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetEnasarcoTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnasarcoType.Get(), o.EnasarcoType.IsSet()
}

// HasEnasarcoType returns a boolean if a field has been set.
func (o *TaxProfile) HasEnasarcoType() bool {
	if o != nil && o.EnasarcoType.IsSet() {
		return true
	}

	return false
}

// SetEnasarcoType gets a reference to the given NullableString and assigns it to the EnasarcoType field.
func (o *TaxProfile) SetEnasarcoType(v string) *TaxProfile {
	o.EnasarcoType.Set(&v)
		return o
}
// SetEnasarcoTypeNil sets the value for EnasarcoType to be an explicit nil
func (o *TaxProfile) SetEnasarcoTypeNil() *TaxProfile {
	o.EnasarcoType.Set(nil)
	return o
}

// UnsetEnasarcoType ensures that no value is present for EnasarcoType, not even an explicit nil
func (o *TaxProfile) UnsetEnasarcoType() {
	o.EnasarcoType.Unset()
}

// GetContributionsPercentage returns the ContributionsPercentage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetContributionsPercentage() float32 {
	if o == nil || IsNil(o.ContributionsPercentage.Get()) {
		var ret float32
		return ret
	}
	return *o.ContributionsPercentage.Get()
}

// GetContributionsPercentageOk returns a tuple with the ContributionsPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetContributionsPercentageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContributionsPercentage.Get(), o.ContributionsPercentage.IsSet()
}

// HasContributionsPercentage returns a boolean if a field has been set.
func (o *TaxProfile) HasContributionsPercentage() bool {
	if o != nil && o.ContributionsPercentage.IsSet() {
		return true
	}

	return false
}

// SetContributionsPercentage gets a reference to the given NullableFloat32 and assigns it to the ContributionsPercentage field.
func (o *TaxProfile) SetContributionsPercentage(v float32) *TaxProfile {
	o.ContributionsPercentage.Set(&v)
		return o
}
// SetContributionsPercentageNil sets the value for ContributionsPercentage to be an explicit nil
func (o *TaxProfile) SetContributionsPercentageNil() *TaxProfile {
	o.ContributionsPercentage.Set(nil)
	return o
}

// UnsetContributionsPercentage ensures that no value is present for ContributionsPercentage, not even an explicit nil
func (o *TaxProfile) UnsetContributionsPercentage() {
	o.ContributionsPercentage.Unset()
}

// GetProfitCoefficient returns the ProfitCoefficient field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetProfitCoefficient() float32 {
	if o == nil || IsNil(o.ProfitCoefficient.Get()) {
		var ret float32
		return ret
	}
	return *o.ProfitCoefficient.Get()
}

// GetProfitCoefficientOk returns a tuple with the ProfitCoefficient field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetProfitCoefficientOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProfitCoefficient.Get(), o.ProfitCoefficient.IsSet()
}

// HasProfitCoefficient returns a boolean if a field has been set.
func (o *TaxProfile) HasProfitCoefficient() bool {
	if o != nil && o.ProfitCoefficient.IsSet() {
		return true
	}

	return false
}

// SetProfitCoefficient gets a reference to the given NullableFloat32 and assigns it to the ProfitCoefficient field.
func (o *TaxProfile) SetProfitCoefficient(v float32) *TaxProfile {
	o.ProfitCoefficient.Set(&v)
		return o
}
// SetProfitCoefficientNil sets the value for ProfitCoefficient to be an explicit nil
func (o *TaxProfile) SetProfitCoefficientNil() *TaxProfile {
	o.ProfitCoefficient.Set(nil)
	return o
}

// UnsetProfitCoefficient ensures that no value is present for ProfitCoefficient, not even an explicit nil
func (o *TaxProfile) UnsetProfitCoefficient() {
	o.ProfitCoefficient.Unset()
}

// GetMed returns the Med field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetMed() bool {
	if o == nil || IsNil(o.Med.Get()) {
		var ret bool
		return ret
	}
	return *o.Med.Get()
}

// GetMedOk returns a tuple with the Med field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetMedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Med.Get(), o.Med.IsSet()
}

// HasMed returns a boolean if a field has been set.
func (o *TaxProfile) HasMed() bool {
	if o != nil && o.Med.IsSet() {
		return true
	}

	return false
}

// SetMed gets a reference to the given NullableBool and assigns it to the Med field.
func (o *TaxProfile) SetMed(v bool) *TaxProfile {
	o.Med.Set(&v)
		return o
}
// SetMedNil sets the value for Med to be an explicit nil
func (o *TaxProfile) SetMedNil() *TaxProfile {
	o.Med.Set(nil)
	return o
}

// UnsetMed ensures that no value is present for Med, not even an explicit nil
func (o *TaxProfile) UnsetMed() {
	o.Med.Unset()
}

// GetDefaultVat returns the DefaultVat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxProfile) GetDefaultVat() VatType {
	if o == nil || IsNil(o.DefaultVat.Get()) {
		var ret VatType
		return ret
	}
	return *o.DefaultVat.Get()
}

// GetDefaultVatOk returns a tuple with the DefaultVat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxProfile) GetDefaultVatOk() (*VatType, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultVat.Get(), o.DefaultVat.IsSet()
}

// HasDefaultVat returns a boolean if a field has been set.
func (o *TaxProfile) HasDefaultVat() bool {
	if o != nil && o.DefaultVat.IsSet() {
		return true
	}

	return false
}

// SetDefaultVat gets a reference to the given NullableVatType and assigns it to the DefaultVat field.
func (o *TaxProfile) SetDefaultVat(v VatType) *TaxProfile {
	o.DefaultVat.Set(&v)
		return o
}
// SetDefaultVatNil sets the value for DefaultVat to be an explicit nil
func (o *TaxProfile) SetDefaultVatNil() *TaxProfile {
	o.DefaultVat.Set(nil)
	return o
}

// UnsetDefaultVat ensures that no value is present for DefaultVat, not even an explicit nil
func (o *TaxProfile) UnsetDefaultVat() {
	o.DefaultVat.Unset()
}

func (o TaxProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CompanyType.IsSet() {
		toSerialize["company_type"] = o.CompanyType.Get()
	}
	if o.CompanySubtype.IsSet() {
		toSerialize["company_subtype"] = o.CompanySubtype.Get()
	}
	if o.Profession.IsSet() {
		toSerialize["profession"] = o.Profession.Get()
	}
	if o.Regime.IsSet() {
		toSerialize["regime"] = o.Regime.Get()
	}
	if o.RivalsaName.IsSet() {
		toSerialize["rivalsa_name"] = o.RivalsaName.Get()
	}
	if o.DefaultRivalsa.IsSet() {
		toSerialize["default_rivalsa"] = o.DefaultRivalsa.Get()
	}
	if o.CassaName.IsSet() {
		toSerialize["cassa_name"] = o.CassaName.Get()
	}
	if o.DefaultCassa.IsSet() {
		toSerialize["default_cassa"] = o.DefaultCassa.Get()
	}
	if o.DefaultCassaTaxable.IsSet() {
		toSerialize["default_cassa_taxable"] = o.DefaultCassaTaxable.Get()
	}
	if o.Cassa2Name.IsSet() {
		toSerialize["cassa2_name"] = o.Cassa2Name.Get()
	}
	if o.DefaultCassa2.IsSet() {
		toSerialize["default_cassa2"] = o.DefaultCassa2.Get()
	}
	if o.DefaultCassa2Taxable.IsSet() {
		toSerialize["default_cassa2_taxable"] = o.DefaultCassa2Taxable.Get()
	}
	if o.DefaultWithholdingTax.IsSet() {
		toSerialize["default_withholding_tax"] = o.DefaultWithholdingTax.Get()
	}
	if o.DefaultWithholdingTaxTaxable.IsSet() {
		toSerialize["default_withholding_tax_taxable"] = o.DefaultWithholdingTaxTaxable.Get()
	}
	if o.DefaultOtherWithholdingTax.IsSet() {
		toSerialize["default_other_withholding_tax"] = o.DefaultOtherWithholdingTax.Get()
	}
	if o.Enasarco.IsSet() {
		toSerialize["enasarco"] = o.Enasarco.Get()
	}
	if o.EnasarcoType.IsSet() {
		toSerialize["enasarco_type"] = o.EnasarcoType.Get()
	}
	if o.ContributionsPercentage.IsSet() {
		toSerialize["contributions_percentage"] = o.ContributionsPercentage.Get()
	}
	if o.ProfitCoefficient.IsSet() {
		toSerialize["profit_coefficient"] = o.ProfitCoefficient.Get()
	}
	if o.Med.IsSet() {
		toSerialize["med"] = o.Med.Get()
	}
	if o.DefaultVat.IsSet() {
		toSerialize["default_vat"] = o.DefaultVat.Get()
	}
	return toSerialize, nil
}

type NullableTaxProfile struct {
	value *TaxProfile
	isSet bool
}

func (v NullableTaxProfile) Get() *TaxProfile {
	return v.value
}

func (v *NullableTaxProfile) Set(val *TaxProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxProfile(val *TaxProfile) *NullableTaxProfile {
	return &NullableTaxProfile{value: val, isSet: true}
}

func (v NullableTaxProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


