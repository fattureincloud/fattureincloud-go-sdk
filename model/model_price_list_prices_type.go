/*
Fatture in Cloud API v2 - API Reference

Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.

API version: 2.1.5
Contact: info@fattureincloud.it
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

// PriceListPricesType Price list prices type
type PriceListPricesType string

// List of PriceListPricesType
var PriceListPricesTypes = struct {
	NET PriceListPricesType
	GROSS PriceListPricesType
} {
	NET: "net",
	GROSS: "gross",
}

// All allowed values of PriceListPricesType enum
var AllowedPriceListPricesTypeEnumValues = []PriceListPricesType{
	"net",
	"gross",
}

func (v *PriceListPricesType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PriceListPricesType(value)
	for _, existing := range AllowedPriceListPricesTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PriceListPricesType", value)
}

// NewPriceListPricesTypeFromValue returns a pointer to a valid PriceListPricesType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPriceListPricesTypeFromValue(v string) (*PriceListPricesType, error) {
	ev := PriceListPricesType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PriceListPricesType: valid values are %v", v, AllowedPriceListPricesTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PriceListPricesType) IsValid() bool {
	for _, existing := range AllowedPriceListPricesTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PriceListPricesType value
func (v PriceListPricesType) Ptr() *PriceListPricesType {
	return &v
}

type NullablePriceListPricesType struct {
	value *PriceListPricesType
	isSet bool
}

func (v NullablePriceListPricesType) Get() *PriceListPricesType {
	return v.value
}

func (v *NullablePriceListPricesType) Set(val *PriceListPricesType) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceListPricesType) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceListPricesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceListPricesType(val *PriceListPricesType) *NullablePriceListPricesType {
	return &NullablePriceListPricesType{value: val, isSet: true}
}

func (v NullablePriceListPricesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceListPricesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

