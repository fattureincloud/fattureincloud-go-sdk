/*
Fatture in Cloud API v2 - API Reference

Testing SettingsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fattureincloud

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    fattureincloud "./openapi"
)

func Test_fattureincloud_SettingsApiService(t *testing.T) {

    configuration := fattureincloud.NewConfiguration()
    apiClient := fattureincloud.NewAPIClient(configuration)

    t.Run("Test SettingsApiService CreatePaymentAccount", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.SettingsApi.CreatePaymentAccount(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SettingsApiService CreatePaymentMethod", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.SettingsApi.CreatePaymentMethod(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SettingsApiService CreateVatType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.SettingsApi.CreateVatType(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SettingsApiService DeletePaymentAccount", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var paymentAccountId int32

        resp, httpRes, err := apiClient.SettingsApi.DeletePaymentAccount(context.Background(), companyId, paymentAccountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SettingsApiService DeletePaymentMethod", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var paymentMethodId int32

        resp, httpRes, err := apiClient.SettingsApi.DeletePaymentMethod(context.Background(), companyId, paymentMethodId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SettingsApiService DeleteVatType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var vatTypeId int32

        resp, httpRes, err := apiClient.SettingsApi.DeleteVatType(context.Background(), companyId, vatTypeId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SettingsApiService GetPaymentAccount", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var paymentAccountId int32

        resp, httpRes, err := apiClient.SettingsApi.GetPaymentAccount(context.Background(), companyId, paymentAccountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SettingsApiService GetPaymentMethod", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var paymentMethodId int32

        resp, httpRes, err := apiClient.SettingsApi.GetPaymentMethod(context.Background(), companyId, paymentMethodId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SettingsApiService GetVatType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var vatTypeId int32

        resp, httpRes, err := apiClient.SettingsApi.GetVatType(context.Background(), companyId, vatTypeId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SettingsApiService ModifyPaymentAccount", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var paymentAccountId int32

        resp, httpRes, err := apiClient.SettingsApi.ModifyPaymentAccount(context.Background(), companyId, paymentAccountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SettingsApiService ModifyPaymentMethod", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var paymentMethodId int32

        resp, httpRes, err := apiClient.SettingsApi.ModifyPaymentMethod(context.Background(), companyId, paymentMethodId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SettingsApiService ModifyVatType", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var vatTypeId int32

        resp, httpRes, err := apiClient.SettingsApi.ModifyVatType(context.Background(), companyId, vatTypeId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
