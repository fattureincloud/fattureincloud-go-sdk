/*
Fatture in Cloud API v2 - API Reference

Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.

API version: 2.1.5
Contact: info@fattureincloud.it
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

// PriceListType Price list types
type PriceListType string

// List of PriceListType
var PriceListTypes = struct {
	SELL PriceListType
	PURCHASE PriceListType
} {
	SELL: "sell",
	PURCHASE: "purchase",
}

// All allowed values of PriceListType enum
var AllowedPriceListTypeEnumValues = []PriceListType{
	"sell",
	"purchase",
}

func (v *PriceListType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PriceListType(value)
	for _, existing := range AllowedPriceListTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PriceListType", value)
}

// NewPriceListTypeFromValue returns a pointer to a valid PriceListType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPriceListTypeFromValue(v string) (*PriceListType, error) {
	ev := PriceListType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PriceListType: valid values are %v", v, AllowedPriceListTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PriceListType) IsValid() bool {
	for _, existing := range AllowedPriceListTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PriceListType value
func (v PriceListType) Ptr() *PriceListType {
	return &v
}

type NullablePriceListType struct {
	value *PriceListType
	isSet bool
}

func (v NullablePriceListType) Get() *PriceListType {
	return v.value
}

func (v *NullablePriceListType) Set(val *PriceListType) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceListType) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceListType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceListType(val *PriceListType) *NullablePriceListType {
	return &NullablePriceListType{value: val, isSet: true}
}

func (v NullablePriceListType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceListType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

