/*
Fatture in Cloud API v2 - API Reference

Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.

API version: 2.1.3
Contact: info@fattureincloud.it
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the IssuedDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssuedDocument{}

// IssuedDocument struct for IssuedDocument
type IssuedDocument struct {
	// Issued document id
Id NullableInt32 `json:"id,omitempty"`
Entity *Entity `json:"entity,omitempty"`
Type *IssuedDocumentType `json:"type,omitempty"`
	// Issued document number [If not specified, next number is used]
Number NullableInt32 `json:"number,omitempty"`
	// Issued document numeration [Not available if type=delivery_note]
Numeration NullableString `json:"numeration,omitempty"`
	// Issued document date [defaults to today's date]
Date NullableString `json:"date,omitempty"`
	// Issued document year
Year NullableInt32 `json:"year,omitempty"`
Currency *Currency `json:"currency,omitempty"`
Language *Language `json:"language,omitempty"`
	// Issued document subject [not shown on the PDF]
Subject NullableString `json:"subject,omitempty"`
	// Issued document visible subject
VisibleSubject NullableString `json:"visible_subject,omitempty"`
	// Issued document revenue center [or cost center if type=supplier_order].
RcCenter NullableString `json:"rc_center,omitempty"`
	// Issued document extra notes
Notes NullableString `json:"notes,omitempty"`
	// Issued document \"Rivalsa INPS\" percentual value
Rivalsa NullableFloat32 `json:"rivalsa,omitempty"`
	// Issued document \"Cassa previdenziale\" percentual value
Cassa NullableFloat32 `json:"cassa,omitempty"`
	// [Read Only] Issued document cassa amount.
AmountCassa NullableFloat32 `json:"amount_cassa,omitempty"`
	// Issued document cassa taxable percentage
CassaTaxable NullableFloat32 `json:"cassa_taxable,omitempty"`
	// [Can be set only if cassa_taxable is NULL] Issued document cassa taxable amount
AmountCassaTaxable NullableFloat32 `json:"amount_cassa_taxable,omitempty"`
	// Issued document \"Cassa previdenziale 2\" percentual value
Cassa2 NullableFloat32 `json:"cassa2,omitempty"`
	// [Read Only] Issued document cassa2 amount
AmountCassa2 NullableFloat32 `json:"amount_cassa2,omitempty"`
	// Issued document cassa2 taxable percentage
Cassa2Taxable NullableFloat32 `json:"cassa2_taxable,omitempty"`
	// [Can be set only if cassa2_taxable is NULL] Issued document cassa2 taxable amount
AmountCassa2Taxable NullableFloat32 `json:"amount_cassa2_taxable,omitempty"`
	// Issued document global cassa taxable percentage
GlobalCassaTaxable NullableFloat32 `json:"global_cassa_taxable,omitempty"`
	// [Can be set only if global_cassa_taxable is NULL] Issued document global cassa taxable amount
AmountGlobalCassaTaxable NullableFloat32 `json:"amount_global_cassa_taxable,omitempty"`
	// Issued document withholding tax (ritenuta d'acconto) percentual value
WithholdingTax NullableFloat32 `json:"withholding_tax,omitempty"`
	// Issued document withholding tax taxable (imponibile) percentual value
WithholdingTaxTaxable NullableFloat32 `json:"withholding_tax_taxable,omitempty"`
	// Issued document other withholding tax (altra ritenuta) percentual value
OtherWithholdingTax NullableFloat32 `json:"other_withholding_tax,omitempty"`
	// Issued document stamp duty value [0 if not present]
StampDuty NullableFloat32 `json:"stamp_duty,omitempty"`
PaymentMethod *PaymentMethod `json:"payment_method,omitempty"`
	// Issued document uses split payment
UseSplitPayment NullableBool `json:"use_split_payment,omitempty"`
	// Issued document uses gross prices
UseGrossPrices NullableBool `json:"use_gross_prices,omitempty"`
	// Issued document is an e-invoice.
EInvoice NullableBool `json:"e_invoice,omitempty"`
EiData NullableIssuedDocumentEiData `json:"ei_data,omitempty"`
	// E-invoice cassa type
EiCassaType NullableString `json:"ei_cassa_type,omitempty"`
	// E-invoice cassa2 type
EiCassa2Type NullableString `json:"ei_cassa2_type,omitempty"`
	// E-invoice withholding tax causal
EiWithholdingTaxCausal NullableString `json:"ei_withholding_tax_causal,omitempty"`
	// E-invoice other withholding tax type
EiOtherWithholdingTaxType NullableString `json:"ei_other_withholding_tax_type,omitempty"`
	// E-invoice other withholding tax causal
EiOtherWithholdingTaxCausal NullableString `json:"ei_other_withholding_tax_causal,omitempty"`
ItemsList []IssuedDocumentItemsListItem `json:"items_list,omitempty"`
PaymentsList []IssuedDocumentPaymentsListItem `json:"payments_list,omitempty"`
Template *DocumentTemplate `json:"template,omitempty"`
DeliveryNoteTemplate *DocumentTemplate `json:"delivery_note_template,omitempty"`
AccInvTemplate *DocumentTemplate `json:"acc_inv_template,omitempty"`
	// Issued document PDF horizontal margins
HMargins NullableInt32 `json:"h_margins,omitempty"`
	// Issued document PDF vertical margins
VMargins NullableInt32 `json:"v_margins,omitempty"`
	// Show the expiration dates of the payments on the document
ShowPayments NullableBool `json:"show_payments,omitempty"`
	// Show the payment method details on the document
ShowPaymentMethod NullableBool `json:"show_payment_method,omitempty"`
ShowTotals *ShowTotalsMode `json:"show_totals,omitempty"`
	// Show notification button in the PDF
ShowNotificationButton NullableBool `json:"show_notification_button,omitempty"`
	// Show ts pay button in the PDF
ShowTspayButton NullableBool `json:"show_tspay_button,omitempty"`
	// Issued document has delivery note
DeliveryNote NullableBool `json:"delivery_note,omitempty"`
	// Issued document has an accompanying invoice
AccompanyingInvoice NullableBool `json:"accompanying_invoice,omitempty"`
	// Issued document attached delivery note number
DnNumber NullableInt32 `json:"dn_number,omitempty"`
	// Issued document attached delivery note date
DnDate NullableString `json:"dn_date,omitempty"`
	// Issued document attached delivery note number of packages
DnAiPackagesNumber NullableString `json:"dn_ai_packages_number,omitempty"`
	// Issued document attached delivery note package weight
DnAiWeight NullableString `json:"dn_ai_weight,omitempty"`
	// Issued document attached delivery note causal
DnAiCausal NullableString `json:"dn_ai_causal,omitempty"`
	// Issued document attached delivery note destination
DnAiDestination NullableString `json:"dn_ai_destination,omitempty"`
	// Issued document attached delivery note transporter
DnAiTransporter NullableString `json:"dn_ai_transporter,omitempty"`
	// Issued document attached delivery note notes
DnAiNotes NullableString `json:"dn_ai_notes,omitempty"`
	// Issued document is marked
IsMarked NullableBool `json:"is_marked,omitempty"`
	// [Read only] Issued document total net amount
AmountNet NullableFloat32 `json:"amount_net,omitempty"`
	// [Read Only] Issued document total vat amount
AmountVat NullableFloat32 `json:"amount_vat,omitempty"`
	// [Read Only] Issued document total gross amount
AmountGross NullableFloat32 `json:"amount_gross,omitempty"`
	// Issued document amount due discount
AmountDueDiscount NullableFloat32 `json:"amount_due_discount,omitempty"`
	// [Read Only] Issued document rivalsa amount
AmountRivalsa NullableFloat32 `json:"amount_rivalsa,omitempty"`
	// Issued document taxable rivalsa amount
AmountRivalsaTaxable NullableFloat32 `json:"amount_rivalsa_taxable,omitempty"`
	// [Read Only] Issued document withholding tax amount (ritenuta d'acconto).
AmountWithholdingTax NullableFloat32 `json:"amount_withholding_tax,omitempty"`
	// Issued document taxable withholding tax amount
AmountWithholdingTaxTaxable NullableFloat32 `json:"amount_withholding_tax_taxable,omitempty"`
	// [Read Only] Issued document other withholding tax amount (altra ritenuta)
AmountOtherWithholdingTax NullableFloat32 `json:"amount_other_withholding_tax,omitempty"`
	// Issued document taxable other withholding tax amount
AmountOtherWithholdingTaxTaxable NullableFloat32 `json:"amount_other_withholding_tax_taxable,omitempty"`
	// Issued document taxable enasarco amount
AmountEnasarcoTaxable NullableFloat32 `json:"amount_enasarco_taxable,omitempty"`
ExtraData NullableIssuedDocumentExtraData `json:"extra_data,omitempty"`
	// Issued document seen date
SeenDate NullableString `json:"seen_date,omitempty"`
	// Issued document date of the next not paid payment
NextDueDate NullableString `json:"next_due_date,omitempty"`
	// [Temporary] [Read Only] Issued document url of the document PDF file
Url NullableString `json:"url,omitempty"`
	// [Temporary] [Read Only] Issued document url of the attached delivery note PDF file
DnUrl NullableString `json:"dn_url,omitempty"`
	// [Temporary] [Read Only] Issued document url of the accompanying invoice PDF file
AiUrl NullableString `json:"ai_url,omitempty"`
	// [Temporary] [Read Only] Issued document url of the attached file
AttachmentUrl NullableString `json:"attachment_url,omitempty"`
	// [Write Only] Issued document attachment token returned by POST /issued_documents/attachment
AttachmentToken NullableString `json:"attachment_token,omitempty"`
	// Issued document advanced raw attributes for e-invoices
EiRaw map[string]interface{} `json:"ei_raw,omitempty"`
	// [Read only] Status of the e-invoice.   * **attempt** - We are trying to send the invoice, please wait up to 2 hours   * **missing** - The invoice is missing   * **not_sent** - The invoice has yet to be sent   * **sent** - The invoice was sent   * **pending** - The checks for the digital signature and sending are in progress   * **processing** - The SDI is delivering the invoice to the customer   * **error** - An error occurred while handling the invoice, please try to resend it or contact support   * **discarded** - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * **not_delivered** - The SDI was unable to deliver the invoice   * **accepted** - The customer accepted the invoice   * **rejected** - The customer rejected the invoice, so it must be corrected   * **no_response** - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice   * **manual_accepted** - The customer accepted the invoice   * **manual_rejected** - The customer rejected the invoice 
EiStatus NullableString `json:"ei_status,omitempty"`
	// Issued Document can't be edited
Locked NullableBool `json:"locked,omitempty"`
	// Issued document creation date
CreatedAt NullableString `json:"created_at,omitempty"`
	// Issued document last update date
UpdatedAt NullableString `json:"updated_at,omitempty"`
}

// NewIssuedDocument instantiates a new IssuedDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuedDocument() *IssuedDocument {
	this := IssuedDocument{}
	return &this
}

// NewIssuedDocumentWithDefaults instantiates a new IssuedDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuedDocumentWithDefaults() *IssuedDocument {
	this := IssuedDocument{}
	var type_ IssuedDocumentType = IssuedDocumentTypes.INVOICE
	this.Type = &type_
	var showTotals ShowTotalsMode = ShowTotalsModes.ALL
	this.ShowTotals = &showTotals
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetId() int32 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *IssuedDocument) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *IssuedDocument) SetId(v int32) *IssuedDocument {
	o.Id.Set(&v)
        return o
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *IssuedDocument) SetIdNil() *IssuedDocument {
	o.Id.Set(nil)
    return o
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *IssuedDocument) UnsetId() {
	o.Id.Unset()
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *IssuedDocument) GetEntity() Entity {
	if o == nil || IsNil(o.Entity) {
		var ret Entity
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuedDocument) GetEntityOk() (*Entity, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *IssuedDocument) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given Entity and assigns it to the Entity field.
func (o *IssuedDocument) SetEntity(v Entity) *IssuedDocument {
	o.Entity = &v
        return o
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IssuedDocument) GetType() IssuedDocumentType {
	if o == nil || IsNil(o.Type) {
		var ret IssuedDocumentType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuedDocument) GetTypeOk() (*IssuedDocumentType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IssuedDocument) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given IssuedDocumentType and assigns it to the Type field.
func (o *IssuedDocument) SetType(v IssuedDocumentType) *IssuedDocument {
	o.Type = &v
        return o
}

// GetNumber returns the Number field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetNumber() int32 {
	if o == nil || IsNil(o.Number.Get()) {
		var ret int32
		return ret
	}
	return *o.Number.Get()
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Number.Get(), o.Number.IsSet()
}

// HasNumber returns a boolean if a field has been set.
func (o *IssuedDocument) HasNumber() bool {
	if o != nil && o.Number.IsSet() {
		return true
	}

	return false
}

// SetNumber gets a reference to the given NullableInt32 and assigns it to the Number field.
func (o *IssuedDocument) SetNumber(v int32) *IssuedDocument {
	o.Number.Set(&v)
        return o
}
// SetNumberNil sets the value for Number to be an explicit nil
func (o *IssuedDocument) SetNumberNil() *IssuedDocument {
	o.Number.Set(nil)
    return o
}

// UnsetNumber ensures that no value is present for Number, not even an explicit nil
func (o *IssuedDocument) UnsetNumber() {
	o.Number.Unset()
}

// GetNumeration returns the Numeration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetNumeration() string {
	if o == nil || IsNil(o.Numeration.Get()) {
		var ret string
		return ret
	}
	return *o.Numeration.Get()
}

// GetNumerationOk returns a tuple with the Numeration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetNumerationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Numeration.Get(), o.Numeration.IsSet()
}

// HasNumeration returns a boolean if a field has been set.
func (o *IssuedDocument) HasNumeration() bool {
	if o != nil && o.Numeration.IsSet() {
		return true
	}

	return false
}

// SetNumeration gets a reference to the given NullableString and assigns it to the Numeration field.
func (o *IssuedDocument) SetNumeration(v string) *IssuedDocument {
	o.Numeration.Set(&v)
        return o
}
// SetNumerationNil sets the value for Numeration to be an explicit nil
func (o *IssuedDocument) SetNumerationNil() *IssuedDocument {
	o.Numeration.Set(nil)
    return o
}

// UnsetNumeration ensures that no value is present for Numeration, not even an explicit nil
func (o *IssuedDocument) UnsetNumeration() {
	o.Numeration.Unset()
}

// GetDate returns the Date field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetDate() string {
	if o == nil || IsNil(o.Date.Get()) {
		var ret string
		return ret
	}
	return *o.Date.Get()
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Date.Get(), o.Date.IsSet()
}

// HasDate returns a boolean if a field has been set.
func (o *IssuedDocument) HasDate() bool {
	if o != nil && o.Date.IsSet() {
		return true
	}

	return false
}

// SetDate gets a reference to the given NullableString and assigns it to the Date field.
func (o *IssuedDocument) SetDate(v string) *IssuedDocument {
	o.Date.Set(&v)
        return o
}
// SetDateNil sets the value for Date to be an explicit nil
func (o *IssuedDocument) SetDateNil() *IssuedDocument {
	o.Date.Set(nil)
    return o
}

// UnsetDate ensures that no value is present for Date, not even an explicit nil
func (o *IssuedDocument) UnsetDate() {
	o.Date.Unset()
}

// GetYear returns the Year field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetYear() int32 {
	if o == nil || IsNil(o.Year.Get()) {
		var ret int32
		return ret
	}
	return *o.Year.Get()
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Year.Get(), o.Year.IsSet()
}

// HasYear returns a boolean if a field has been set.
func (o *IssuedDocument) HasYear() bool {
	if o != nil && o.Year.IsSet() {
		return true
	}

	return false
}

// SetYear gets a reference to the given NullableInt32 and assigns it to the Year field.
func (o *IssuedDocument) SetYear(v int32) *IssuedDocument {
	o.Year.Set(&v)
        return o
}
// SetYearNil sets the value for Year to be an explicit nil
func (o *IssuedDocument) SetYearNil() *IssuedDocument {
	o.Year.Set(nil)
    return o
}

// UnsetYear ensures that no value is present for Year, not even an explicit nil
func (o *IssuedDocument) UnsetYear() {
	o.Year.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *IssuedDocument) GetCurrency() Currency {
	if o == nil || IsNil(o.Currency) {
		var ret Currency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuedDocument) GetCurrencyOk() (*Currency, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *IssuedDocument) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given Currency and assigns it to the Currency field.
func (o *IssuedDocument) SetCurrency(v Currency) *IssuedDocument {
	o.Currency = &v
        return o
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *IssuedDocument) GetLanguage() Language {
	if o == nil || IsNil(o.Language) {
		var ret Language
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuedDocument) GetLanguageOk() (*Language, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *IssuedDocument) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given Language and assigns it to the Language field.
func (o *IssuedDocument) SetLanguage(v Language) *IssuedDocument {
	o.Language = &v
        return o
}

// GetSubject returns the Subject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetSubject() string {
	if o == nil || IsNil(o.Subject.Get()) {
		var ret string
		return ret
	}
	return *o.Subject.Get()
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subject.Get(), o.Subject.IsSet()
}

// HasSubject returns a boolean if a field has been set.
func (o *IssuedDocument) HasSubject() bool {
	if o != nil && o.Subject.IsSet() {
		return true
	}

	return false
}

// SetSubject gets a reference to the given NullableString and assigns it to the Subject field.
func (o *IssuedDocument) SetSubject(v string) *IssuedDocument {
	o.Subject.Set(&v)
        return o
}
// SetSubjectNil sets the value for Subject to be an explicit nil
func (o *IssuedDocument) SetSubjectNil() *IssuedDocument {
	o.Subject.Set(nil)
    return o
}

// UnsetSubject ensures that no value is present for Subject, not even an explicit nil
func (o *IssuedDocument) UnsetSubject() {
	o.Subject.Unset()
}

// GetVisibleSubject returns the VisibleSubject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetVisibleSubject() string {
	if o == nil || IsNil(o.VisibleSubject.Get()) {
		var ret string
		return ret
	}
	return *o.VisibleSubject.Get()
}

// GetVisibleSubjectOk returns a tuple with the VisibleSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetVisibleSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VisibleSubject.Get(), o.VisibleSubject.IsSet()
}

// HasVisibleSubject returns a boolean if a field has been set.
func (o *IssuedDocument) HasVisibleSubject() bool {
	if o != nil && o.VisibleSubject.IsSet() {
		return true
	}

	return false
}

// SetVisibleSubject gets a reference to the given NullableString and assigns it to the VisibleSubject field.
func (o *IssuedDocument) SetVisibleSubject(v string) *IssuedDocument {
	o.VisibleSubject.Set(&v)
        return o
}
// SetVisibleSubjectNil sets the value for VisibleSubject to be an explicit nil
func (o *IssuedDocument) SetVisibleSubjectNil() *IssuedDocument {
	o.VisibleSubject.Set(nil)
    return o
}

// UnsetVisibleSubject ensures that no value is present for VisibleSubject, not even an explicit nil
func (o *IssuedDocument) UnsetVisibleSubject() {
	o.VisibleSubject.Unset()
}

// GetRcCenter returns the RcCenter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetRcCenter() string {
	if o == nil || IsNil(o.RcCenter.Get()) {
		var ret string
		return ret
	}
	return *o.RcCenter.Get()
}

// GetRcCenterOk returns a tuple with the RcCenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetRcCenterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RcCenter.Get(), o.RcCenter.IsSet()
}

// HasRcCenter returns a boolean if a field has been set.
func (o *IssuedDocument) HasRcCenter() bool {
	if o != nil && o.RcCenter.IsSet() {
		return true
	}

	return false
}

// SetRcCenter gets a reference to the given NullableString and assigns it to the RcCenter field.
func (o *IssuedDocument) SetRcCenter(v string) *IssuedDocument {
	o.RcCenter.Set(&v)
        return o
}
// SetRcCenterNil sets the value for RcCenter to be an explicit nil
func (o *IssuedDocument) SetRcCenterNil() *IssuedDocument {
	o.RcCenter.Set(nil)
    return o
}

// UnsetRcCenter ensures that no value is present for RcCenter, not even an explicit nil
func (o *IssuedDocument) UnsetRcCenter() {
	o.RcCenter.Unset()
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetNotes() string {
	if o == nil || IsNil(o.Notes.Get()) {
		var ret string
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetNotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *IssuedDocument) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableString and assigns it to the Notes field.
func (o *IssuedDocument) SetNotes(v string) *IssuedDocument {
	o.Notes.Set(&v)
        return o
}
// SetNotesNil sets the value for Notes to be an explicit nil
func (o *IssuedDocument) SetNotesNil() *IssuedDocument {
	o.Notes.Set(nil)
    return o
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *IssuedDocument) UnsetNotes() {
	o.Notes.Unset()
}

// GetRivalsa returns the Rivalsa field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetRivalsa() float32 {
	if o == nil || IsNil(o.Rivalsa.Get()) {
		var ret float32
		return ret
	}
	return *o.Rivalsa.Get()
}

// GetRivalsaOk returns a tuple with the Rivalsa field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetRivalsaOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rivalsa.Get(), o.Rivalsa.IsSet()
}

// HasRivalsa returns a boolean if a field has been set.
func (o *IssuedDocument) HasRivalsa() bool {
	if o != nil && o.Rivalsa.IsSet() {
		return true
	}

	return false
}

// SetRivalsa gets a reference to the given NullableFloat32 and assigns it to the Rivalsa field.
func (o *IssuedDocument) SetRivalsa(v float32) *IssuedDocument {
	o.Rivalsa.Set(&v)
        return o
}
// SetRivalsaNil sets the value for Rivalsa to be an explicit nil
func (o *IssuedDocument) SetRivalsaNil() *IssuedDocument {
	o.Rivalsa.Set(nil)
    return o
}

// UnsetRivalsa ensures that no value is present for Rivalsa, not even an explicit nil
func (o *IssuedDocument) UnsetRivalsa() {
	o.Rivalsa.Unset()
}

// GetCassa returns the Cassa field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetCassa() float32 {
	if o == nil || IsNil(o.Cassa.Get()) {
		var ret float32
		return ret
	}
	return *o.Cassa.Get()
}

// GetCassaOk returns a tuple with the Cassa field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetCassaOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cassa.Get(), o.Cassa.IsSet()
}

// HasCassa returns a boolean if a field has been set.
func (o *IssuedDocument) HasCassa() bool {
	if o != nil && o.Cassa.IsSet() {
		return true
	}

	return false
}

// SetCassa gets a reference to the given NullableFloat32 and assigns it to the Cassa field.
func (o *IssuedDocument) SetCassa(v float32) *IssuedDocument {
	o.Cassa.Set(&v)
        return o
}
// SetCassaNil sets the value for Cassa to be an explicit nil
func (o *IssuedDocument) SetCassaNil() *IssuedDocument {
	o.Cassa.Set(nil)
    return o
}

// UnsetCassa ensures that no value is present for Cassa, not even an explicit nil
func (o *IssuedDocument) UnsetCassa() {
	o.Cassa.Unset()
}

// GetAmountCassa returns the AmountCassa field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAmountCassa() float32 {
	if o == nil || IsNil(o.AmountCassa.Get()) {
		var ret float32
		return ret
	}
	return *o.AmountCassa.Get()
}

// GetAmountCassaOk returns a tuple with the AmountCassa field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAmountCassaOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountCassa.Get(), o.AmountCassa.IsSet()
}

// HasAmountCassa returns a boolean if a field has been set.
func (o *IssuedDocument) HasAmountCassa() bool {
	if o != nil && o.AmountCassa.IsSet() {
		return true
	}

	return false
}

// SetAmountCassa gets a reference to the given NullableFloat32 and assigns it to the AmountCassa field.
func (o *IssuedDocument) SetAmountCassa(v float32) *IssuedDocument {
	o.AmountCassa.Set(&v)
        return o
}
// SetAmountCassaNil sets the value for AmountCassa to be an explicit nil
func (o *IssuedDocument) SetAmountCassaNil() *IssuedDocument {
	o.AmountCassa.Set(nil)
    return o
}

// UnsetAmountCassa ensures that no value is present for AmountCassa, not even an explicit nil
func (o *IssuedDocument) UnsetAmountCassa() {
	o.AmountCassa.Unset()
}

// GetCassaTaxable returns the CassaTaxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetCassaTaxable() float32 {
	if o == nil || IsNil(o.CassaTaxable.Get()) {
		var ret float32
		return ret
	}
	return *o.CassaTaxable.Get()
}

// GetCassaTaxableOk returns a tuple with the CassaTaxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetCassaTaxableOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CassaTaxable.Get(), o.CassaTaxable.IsSet()
}

// HasCassaTaxable returns a boolean if a field has been set.
func (o *IssuedDocument) HasCassaTaxable() bool {
	if o != nil && o.CassaTaxable.IsSet() {
		return true
	}

	return false
}

// SetCassaTaxable gets a reference to the given NullableFloat32 and assigns it to the CassaTaxable field.
func (o *IssuedDocument) SetCassaTaxable(v float32) *IssuedDocument {
	o.CassaTaxable.Set(&v)
        return o
}
// SetCassaTaxableNil sets the value for CassaTaxable to be an explicit nil
func (o *IssuedDocument) SetCassaTaxableNil() *IssuedDocument {
	o.CassaTaxable.Set(nil)
    return o
}

// UnsetCassaTaxable ensures that no value is present for CassaTaxable, not even an explicit nil
func (o *IssuedDocument) UnsetCassaTaxable() {
	o.CassaTaxable.Unset()
}

// GetAmountCassaTaxable returns the AmountCassaTaxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAmountCassaTaxable() float32 {
	if o == nil || IsNil(o.AmountCassaTaxable.Get()) {
		var ret float32
		return ret
	}
	return *o.AmountCassaTaxable.Get()
}

// GetAmountCassaTaxableOk returns a tuple with the AmountCassaTaxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAmountCassaTaxableOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountCassaTaxable.Get(), o.AmountCassaTaxable.IsSet()
}

// HasAmountCassaTaxable returns a boolean if a field has been set.
func (o *IssuedDocument) HasAmountCassaTaxable() bool {
	if o != nil && o.AmountCassaTaxable.IsSet() {
		return true
	}

	return false
}

// SetAmountCassaTaxable gets a reference to the given NullableFloat32 and assigns it to the AmountCassaTaxable field.
func (o *IssuedDocument) SetAmountCassaTaxable(v float32) *IssuedDocument {
	o.AmountCassaTaxable.Set(&v)
        return o
}
// SetAmountCassaTaxableNil sets the value for AmountCassaTaxable to be an explicit nil
func (o *IssuedDocument) SetAmountCassaTaxableNil() *IssuedDocument {
	o.AmountCassaTaxable.Set(nil)
    return o
}

// UnsetAmountCassaTaxable ensures that no value is present for AmountCassaTaxable, not even an explicit nil
func (o *IssuedDocument) UnsetAmountCassaTaxable() {
	o.AmountCassaTaxable.Unset()
}

// GetCassa2 returns the Cassa2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetCassa2() float32 {
	if o == nil || IsNil(o.Cassa2.Get()) {
		var ret float32
		return ret
	}
	return *o.Cassa2.Get()
}

// GetCassa2Ok returns a tuple with the Cassa2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetCassa2Ok() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cassa2.Get(), o.Cassa2.IsSet()
}

// HasCassa2 returns a boolean if a field has been set.
func (o *IssuedDocument) HasCassa2() bool {
	if o != nil && o.Cassa2.IsSet() {
		return true
	}

	return false
}

// SetCassa2 gets a reference to the given NullableFloat32 and assigns it to the Cassa2 field.
func (o *IssuedDocument) SetCassa2(v float32) *IssuedDocument {
	o.Cassa2.Set(&v)
        return o
}
// SetCassa2Nil sets the value for Cassa2 to be an explicit nil
func (o *IssuedDocument) SetCassa2Nil() *IssuedDocument {
	o.Cassa2.Set(nil)
    return o
}

// UnsetCassa2 ensures that no value is present for Cassa2, not even an explicit nil
func (o *IssuedDocument) UnsetCassa2() {
	o.Cassa2.Unset()
}

// GetAmountCassa2 returns the AmountCassa2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAmountCassa2() float32 {
	if o == nil || IsNil(o.AmountCassa2.Get()) {
		var ret float32
		return ret
	}
	return *o.AmountCassa2.Get()
}

// GetAmountCassa2Ok returns a tuple with the AmountCassa2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAmountCassa2Ok() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountCassa2.Get(), o.AmountCassa2.IsSet()
}

// HasAmountCassa2 returns a boolean if a field has been set.
func (o *IssuedDocument) HasAmountCassa2() bool {
	if o != nil && o.AmountCassa2.IsSet() {
		return true
	}

	return false
}

// SetAmountCassa2 gets a reference to the given NullableFloat32 and assigns it to the AmountCassa2 field.
func (o *IssuedDocument) SetAmountCassa2(v float32) *IssuedDocument {
	o.AmountCassa2.Set(&v)
        return o
}
// SetAmountCassa2Nil sets the value for AmountCassa2 to be an explicit nil
func (o *IssuedDocument) SetAmountCassa2Nil() *IssuedDocument {
	o.AmountCassa2.Set(nil)
    return o
}

// UnsetAmountCassa2 ensures that no value is present for AmountCassa2, not even an explicit nil
func (o *IssuedDocument) UnsetAmountCassa2() {
	o.AmountCassa2.Unset()
}

// GetCassa2Taxable returns the Cassa2Taxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetCassa2Taxable() float32 {
	if o == nil || IsNil(o.Cassa2Taxable.Get()) {
		var ret float32
		return ret
	}
	return *o.Cassa2Taxable.Get()
}

// GetCassa2TaxableOk returns a tuple with the Cassa2Taxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetCassa2TaxableOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cassa2Taxable.Get(), o.Cassa2Taxable.IsSet()
}

// HasCassa2Taxable returns a boolean if a field has been set.
func (o *IssuedDocument) HasCassa2Taxable() bool {
	if o != nil && o.Cassa2Taxable.IsSet() {
		return true
	}

	return false
}

// SetCassa2Taxable gets a reference to the given NullableFloat32 and assigns it to the Cassa2Taxable field.
func (o *IssuedDocument) SetCassa2Taxable(v float32) *IssuedDocument {
	o.Cassa2Taxable.Set(&v)
        return o
}
// SetCassa2TaxableNil sets the value for Cassa2Taxable to be an explicit nil
func (o *IssuedDocument) SetCassa2TaxableNil() *IssuedDocument {
	o.Cassa2Taxable.Set(nil)
    return o
}

// UnsetCassa2Taxable ensures that no value is present for Cassa2Taxable, not even an explicit nil
func (o *IssuedDocument) UnsetCassa2Taxable() {
	o.Cassa2Taxable.Unset()
}

// GetAmountCassa2Taxable returns the AmountCassa2Taxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAmountCassa2Taxable() float32 {
	if o == nil || IsNil(o.AmountCassa2Taxable.Get()) {
		var ret float32
		return ret
	}
	return *o.AmountCassa2Taxable.Get()
}

// GetAmountCassa2TaxableOk returns a tuple with the AmountCassa2Taxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAmountCassa2TaxableOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountCassa2Taxable.Get(), o.AmountCassa2Taxable.IsSet()
}

// HasAmountCassa2Taxable returns a boolean if a field has been set.
func (o *IssuedDocument) HasAmountCassa2Taxable() bool {
	if o != nil && o.AmountCassa2Taxable.IsSet() {
		return true
	}

	return false
}

// SetAmountCassa2Taxable gets a reference to the given NullableFloat32 and assigns it to the AmountCassa2Taxable field.
func (o *IssuedDocument) SetAmountCassa2Taxable(v float32) *IssuedDocument {
	o.AmountCassa2Taxable.Set(&v)
        return o
}
// SetAmountCassa2TaxableNil sets the value for AmountCassa2Taxable to be an explicit nil
func (o *IssuedDocument) SetAmountCassa2TaxableNil() *IssuedDocument {
	o.AmountCassa2Taxable.Set(nil)
    return o
}

// UnsetAmountCassa2Taxable ensures that no value is present for AmountCassa2Taxable, not even an explicit nil
func (o *IssuedDocument) UnsetAmountCassa2Taxable() {
	o.AmountCassa2Taxable.Unset()
}

// GetGlobalCassaTaxable returns the GlobalCassaTaxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetGlobalCassaTaxable() float32 {
	if o == nil || IsNil(o.GlobalCassaTaxable.Get()) {
		var ret float32
		return ret
	}
	return *o.GlobalCassaTaxable.Get()
}

// GetGlobalCassaTaxableOk returns a tuple with the GlobalCassaTaxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetGlobalCassaTaxableOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.GlobalCassaTaxable.Get(), o.GlobalCassaTaxable.IsSet()
}

// HasGlobalCassaTaxable returns a boolean if a field has been set.
func (o *IssuedDocument) HasGlobalCassaTaxable() bool {
	if o != nil && o.GlobalCassaTaxable.IsSet() {
		return true
	}

	return false
}

// SetGlobalCassaTaxable gets a reference to the given NullableFloat32 and assigns it to the GlobalCassaTaxable field.
func (o *IssuedDocument) SetGlobalCassaTaxable(v float32) *IssuedDocument {
	o.GlobalCassaTaxable.Set(&v)
        return o
}
// SetGlobalCassaTaxableNil sets the value for GlobalCassaTaxable to be an explicit nil
func (o *IssuedDocument) SetGlobalCassaTaxableNil() *IssuedDocument {
	o.GlobalCassaTaxable.Set(nil)
    return o
}

// UnsetGlobalCassaTaxable ensures that no value is present for GlobalCassaTaxable, not even an explicit nil
func (o *IssuedDocument) UnsetGlobalCassaTaxable() {
	o.GlobalCassaTaxable.Unset()
}

// GetAmountGlobalCassaTaxable returns the AmountGlobalCassaTaxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAmountGlobalCassaTaxable() float32 {
	if o == nil || IsNil(o.AmountGlobalCassaTaxable.Get()) {
		var ret float32
		return ret
	}
	return *o.AmountGlobalCassaTaxable.Get()
}

// GetAmountGlobalCassaTaxableOk returns a tuple with the AmountGlobalCassaTaxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAmountGlobalCassaTaxableOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountGlobalCassaTaxable.Get(), o.AmountGlobalCassaTaxable.IsSet()
}

// HasAmountGlobalCassaTaxable returns a boolean if a field has been set.
func (o *IssuedDocument) HasAmountGlobalCassaTaxable() bool {
	if o != nil && o.AmountGlobalCassaTaxable.IsSet() {
		return true
	}

	return false
}

// SetAmountGlobalCassaTaxable gets a reference to the given NullableFloat32 and assigns it to the AmountGlobalCassaTaxable field.
func (o *IssuedDocument) SetAmountGlobalCassaTaxable(v float32) *IssuedDocument {
	o.AmountGlobalCassaTaxable.Set(&v)
        return o
}
// SetAmountGlobalCassaTaxableNil sets the value for AmountGlobalCassaTaxable to be an explicit nil
func (o *IssuedDocument) SetAmountGlobalCassaTaxableNil() *IssuedDocument {
	o.AmountGlobalCassaTaxable.Set(nil)
    return o
}

// UnsetAmountGlobalCassaTaxable ensures that no value is present for AmountGlobalCassaTaxable, not even an explicit nil
func (o *IssuedDocument) UnsetAmountGlobalCassaTaxable() {
	o.AmountGlobalCassaTaxable.Unset()
}

// GetWithholdingTax returns the WithholdingTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetWithholdingTax() float32 {
	if o == nil || IsNil(o.WithholdingTax.Get()) {
		var ret float32
		return ret
	}
	return *o.WithholdingTax.Get()
}

// GetWithholdingTaxOk returns a tuple with the WithholdingTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetWithholdingTaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithholdingTax.Get(), o.WithholdingTax.IsSet()
}

// HasWithholdingTax returns a boolean if a field has been set.
func (o *IssuedDocument) HasWithholdingTax() bool {
	if o != nil && o.WithholdingTax.IsSet() {
		return true
	}

	return false
}

// SetWithholdingTax gets a reference to the given NullableFloat32 and assigns it to the WithholdingTax field.
func (o *IssuedDocument) SetWithholdingTax(v float32) *IssuedDocument {
	o.WithholdingTax.Set(&v)
        return o
}
// SetWithholdingTaxNil sets the value for WithholdingTax to be an explicit nil
func (o *IssuedDocument) SetWithholdingTaxNil() *IssuedDocument {
	o.WithholdingTax.Set(nil)
    return o
}

// UnsetWithholdingTax ensures that no value is present for WithholdingTax, not even an explicit nil
func (o *IssuedDocument) UnsetWithholdingTax() {
	o.WithholdingTax.Unset()
}

// GetWithholdingTaxTaxable returns the WithholdingTaxTaxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetWithholdingTaxTaxable() float32 {
	if o == nil || IsNil(o.WithholdingTaxTaxable.Get()) {
		var ret float32
		return ret
	}
	return *o.WithholdingTaxTaxable.Get()
}

// GetWithholdingTaxTaxableOk returns a tuple with the WithholdingTaxTaxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetWithholdingTaxTaxableOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithholdingTaxTaxable.Get(), o.WithholdingTaxTaxable.IsSet()
}

// HasWithholdingTaxTaxable returns a boolean if a field has been set.
func (o *IssuedDocument) HasWithholdingTaxTaxable() bool {
	if o != nil && o.WithholdingTaxTaxable.IsSet() {
		return true
	}

	return false
}

// SetWithholdingTaxTaxable gets a reference to the given NullableFloat32 and assigns it to the WithholdingTaxTaxable field.
func (o *IssuedDocument) SetWithholdingTaxTaxable(v float32) *IssuedDocument {
	o.WithholdingTaxTaxable.Set(&v)
        return o
}
// SetWithholdingTaxTaxableNil sets the value for WithholdingTaxTaxable to be an explicit nil
func (o *IssuedDocument) SetWithholdingTaxTaxableNil() *IssuedDocument {
	o.WithholdingTaxTaxable.Set(nil)
    return o
}

// UnsetWithholdingTaxTaxable ensures that no value is present for WithholdingTaxTaxable, not even an explicit nil
func (o *IssuedDocument) UnsetWithholdingTaxTaxable() {
	o.WithholdingTaxTaxable.Unset()
}

// GetOtherWithholdingTax returns the OtherWithholdingTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetOtherWithholdingTax() float32 {
	if o == nil || IsNil(o.OtherWithholdingTax.Get()) {
		var ret float32
		return ret
	}
	return *o.OtherWithholdingTax.Get()
}

// GetOtherWithholdingTaxOk returns a tuple with the OtherWithholdingTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetOtherWithholdingTaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OtherWithholdingTax.Get(), o.OtherWithholdingTax.IsSet()
}

// HasOtherWithholdingTax returns a boolean if a field has been set.
func (o *IssuedDocument) HasOtherWithholdingTax() bool {
	if o != nil && o.OtherWithholdingTax.IsSet() {
		return true
	}

	return false
}

// SetOtherWithholdingTax gets a reference to the given NullableFloat32 and assigns it to the OtherWithholdingTax field.
func (o *IssuedDocument) SetOtherWithholdingTax(v float32) *IssuedDocument {
	o.OtherWithholdingTax.Set(&v)
        return o
}
// SetOtherWithholdingTaxNil sets the value for OtherWithholdingTax to be an explicit nil
func (o *IssuedDocument) SetOtherWithholdingTaxNil() *IssuedDocument {
	o.OtherWithholdingTax.Set(nil)
    return o
}

// UnsetOtherWithholdingTax ensures that no value is present for OtherWithholdingTax, not even an explicit nil
func (o *IssuedDocument) UnsetOtherWithholdingTax() {
	o.OtherWithholdingTax.Unset()
}

// GetStampDuty returns the StampDuty field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetStampDuty() float32 {
	if o == nil || IsNil(o.StampDuty.Get()) {
		var ret float32
		return ret
	}
	return *o.StampDuty.Get()
}

// GetStampDutyOk returns a tuple with the StampDuty field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetStampDutyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StampDuty.Get(), o.StampDuty.IsSet()
}

// HasStampDuty returns a boolean if a field has been set.
func (o *IssuedDocument) HasStampDuty() bool {
	if o != nil && o.StampDuty.IsSet() {
		return true
	}

	return false
}

// SetStampDuty gets a reference to the given NullableFloat32 and assigns it to the StampDuty field.
func (o *IssuedDocument) SetStampDuty(v float32) *IssuedDocument {
	o.StampDuty.Set(&v)
        return o
}
// SetStampDutyNil sets the value for StampDuty to be an explicit nil
func (o *IssuedDocument) SetStampDutyNil() *IssuedDocument {
	o.StampDuty.Set(nil)
    return o
}

// UnsetStampDuty ensures that no value is present for StampDuty, not even an explicit nil
func (o *IssuedDocument) UnsetStampDuty() {
	o.StampDuty.Unset()
}

// GetPaymentMethod returns the PaymentMethod field value if set, zero value otherwise.
func (o *IssuedDocument) GetPaymentMethod() PaymentMethod {
	if o == nil || IsNil(o.PaymentMethod) {
		var ret PaymentMethod
		return ret
	}
	return *o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuedDocument) GetPaymentMethodOk() (*PaymentMethod, bool) {
	if o == nil || IsNil(o.PaymentMethod) {
		return nil, false
	}
	return o.PaymentMethod, true
}

// HasPaymentMethod returns a boolean if a field has been set.
func (o *IssuedDocument) HasPaymentMethod() bool {
	if o != nil && !IsNil(o.PaymentMethod) {
		return true
	}

	return false
}

// SetPaymentMethod gets a reference to the given PaymentMethod and assigns it to the PaymentMethod field.
func (o *IssuedDocument) SetPaymentMethod(v PaymentMethod) *IssuedDocument {
	o.PaymentMethod = &v
        return o
}

// GetUseSplitPayment returns the UseSplitPayment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetUseSplitPayment() bool {
	if o == nil || IsNil(o.UseSplitPayment.Get()) {
		var ret bool
		return ret
	}
	return *o.UseSplitPayment.Get()
}

// GetUseSplitPaymentOk returns a tuple with the UseSplitPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetUseSplitPaymentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseSplitPayment.Get(), o.UseSplitPayment.IsSet()
}

// HasUseSplitPayment returns a boolean if a field has been set.
func (o *IssuedDocument) HasUseSplitPayment() bool {
	if o != nil && o.UseSplitPayment.IsSet() {
		return true
	}

	return false
}

// SetUseSplitPayment gets a reference to the given NullableBool and assigns it to the UseSplitPayment field.
func (o *IssuedDocument) SetUseSplitPayment(v bool) *IssuedDocument {
	o.UseSplitPayment.Set(&v)
        return o
}
// SetUseSplitPaymentNil sets the value for UseSplitPayment to be an explicit nil
func (o *IssuedDocument) SetUseSplitPaymentNil() *IssuedDocument {
	o.UseSplitPayment.Set(nil)
    return o
}

// UnsetUseSplitPayment ensures that no value is present for UseSplitPayment, not even an explicit nil
func (o *IssuedDocument) UnsetUseSplitPayment() {
	o.UseSplitPayment.Unset()
}

// GetUseGrossPrices returns the UseGrossPrices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetUseGrossPrices() bool {
	if o == nil || IsNil(o.UseGrossPrices.Get()) {
		var ret bool
		return ret
	}
	return *o.UseGrossPrices.Get()
}

// GetUseGrossPricesOk returns a tuple with the UseGrossPrices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetUseGrossPricesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseGrossPrices.Get(), o.UseGrossPrices.IsSet()
}

// HasUseGrossPrices returns a boolean if a field has been set.
func (o *IssuedDocument) HasUseGrossPrices() bool {
	if o != nil && o.UseGrossPrices.IsSet() {
		return true
	}

	return false
}

// SetUseGrossPrices gets a reference to the given NullableBool and assigns it to the UseGrossPrices field.
func (o *IssuedDocument) SetUseGrossPrices(v bool) *IssuedDocument {
	o.UseGrossPrices.Set(&v)
        return o
}
// SetUseGrossPricesNil sets the value for UseGrossPrices to be an explicit nil
func (o *IssuedDocument) SetUseGrossPricesNil() *IssuedDocument {
	o.UseGrossPrices.Set(nil)
    return o
}

// UnsetUseGrossPrices ensures that no value is present for UseGrossPrices, not even an explicit nil
func (o *IssuedDocument) UnsetUseGrossPrices() {
	o.UseGrossPrices.Unset()
}

// GetEInvoice returns the EInvoice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetEInvoice() bool {
	if o == nil || IsNil(o.EInvoice.Get()) {
		var ret bool
		return ret
	}
	return *o.EInvoice.Get()
}

// GetEInvoiceOk returns a tuple with the EInvoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetEInvoiceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EInvoice.Get(), o.EInvoice.IsSet()
}

// HasEInvoice returns a boolean if a field has been set.
func (o *IssuedDocument) HasEInvoice() bool {
	if o != nil && o.EInvoice.IsSet() {
		return true
	}

	return false
}

// SetEInvoice gets a reference to the given NullableBool and assigns it to the EInvoice field.
func (o *IssuedDocument) SetEInvoice(v bool) *IssuedDocument {
	o.EInvoice.Set(&v)
        return o
}
// SetEInvoiceNil sets the value for EInvoice to be an explicit nil
func (o *IssuedDocument) SetEInvoiceNil() *IssuedDocument {
	o.EInvoice.Set(nil)
    return o
}

// UnsetEInvoice ensures that no value is present for EInvoice, not even an explicit nil
func (o *IssuedDocument) UnsetEInvoice() {
	o.EInvoice.Unset()
}

// GetEiData returns the EiData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetEiData() IssuedDocumentEiData {
	if o == nil || IsNil(o.EiData.Get()) {
		var ret IssuedDocumentEiData
		return ret
	}
	return *o.EiData.Get()
}

// GetEiDataOk returns a tuple with the EiData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetEiDataOk() (*IssuedDocumentEiData, bool) {
	if o == nil {
		return nil, false
	}
	return o.EiData.Get(), o.EiData.IsSet()
}

// HasEiData returns a boolean if a field has been set.
func (o *IssuedDocument) HasEiData() bool {
	if o != nil && o.EiData.IsSet() {
		return true
	}

	return false
}

// SetEiData gets a reference to the given NullableIssuedDocumentEiData and assigns it to the EiData field.
func (o *IssuedDocument) SetEiData(v IssuedDocumentEiData) *IssuedDocument {
	o.EiData.Set(&v)
        return o
}
// SetEiDataNil sets the value for EiData to be an explicit nil
func (o *IssuedDocument) SetEiDataNil() *IssuedDocument {
	o.EiData.Set(nil)
    return o
}

// UnsetEiData ensures that no value is present for EiData, not even an explicit nil
func (o *IssuedDocument) UnsetEiData() {
	o.EiData.Unset()
}

// GetEiCassaType returns the EiCassaType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetEiCassaType() string {
	if o == nil || IsNil(o.EiCassaType.Get()) {
		var ret string
		return ret
	}
	return *o.EiCassaType.Get()
}

// GetEiCassaTypeOk returns a tuple with the EiCassaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetEiCassaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EiCassaType.Get(), o.EiCassaType.IsSet()
}

// HasEiCassaType returns a boolean if a field has been set.
func (o *IssuedDocument) HasEiCassaType() bool {
	if o != nil && o.EiCassaType.IsSet() {
		return true
	}

	return false
}

// SetEiCassaType gets a reference to the given NullableString and assigns it to the EiCassaType field.
func (o *IssuedDocument) SetEiCassaType(v string) *IssuedDocument {
	o.EiCassaType.Set(&v)
        return o
}
// SetEiCassaTypeNil sets the value for EiCassaType to be an explicit nil
func (o *IssuedDocument) SetEiCassaTypeNil() *IssuedDocument {
	o.EiCassaType.Set(nil)
    return o
}

// UnsetEiCassaType ensures that no value is present for EiCassaType, not even an explicit nil
func (o *IssuedDocument) UnsetEiCassaType() {
	o.EiCassaType.Unset()
}

// GetEiCassa2Type returns the EiCassa2Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetEiCassa2Type() string {
	if o == nil || IsNil(o.EiCassa2Type.Get()) {
		var ret string
		return ret
	}
	return *o.EiCassa2Type.Get()
}

// GetEiCassa2TypeOk returns a tuple with the EiCassa2Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetEiCassa2TypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EiCassa2Type.Get(), o.EiCassa2Type.IsSet()
}

// HasEiCassa2Type returns a boolean if a field has been set.
func (o *IssuedDocument) HasEiCassa2Type() bool {
	if o != nil && o.EiCassa2Type.IsSet() {
		return true
	}

	return false
}

// SetEiCassa2Type gets a reference to the given NullableString and assigns it to the EiCassa2Type field.
func (o *IssuedDocument) SetEiCassa2Type(v string) *IssuedDocument {
	o.EiCassa2Type.Set(&v)
        return o
}
// SetEiCassa2TypeNil sets the value for EiCassa2Type to be an explicit nil
func (o *IssuedDocument) SetEiCassa2TypeNil() *IssuedDocument {
	o.EiCassa2Type.Set(nil)
    return o
}

// UnsetEiCassa2Type ensures that no value is present for EiCassa2Type, not even an explicit nil
func (o *IssuedDocument) UnsetEiCassa2Type() {
	o.EiCassa2Type.Unset()
}

// GetEiWithholdingTaxCausal returns the EiWithholdingTaxCausal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetEiWithholdingTaxCausal() string {
	if o == nil || IsNil(o.EiWithholdingTaxCausal.Get()) {
		var ret string
		return ret
	}
	return *o.EiWithholdingTaxCausal.Get()
}

// GetEiWithholdingTaxCausalOk returns a tuple with the EiWithholdingTaxCausal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetEiWithholdingTaxCausalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EiWithholdingTaxCausal.Get(), o.EiWithholdingTaxCausal.IsSet()
}

// HasEiWithholdingTaxCausal returns a boolean if a field has been set.
func (o *IssuedDocument) HasEiWithholdingTaxCausal() bool {
	if o != nil && o.EiWithholdingTaxCausal.IsSet() {
		return true
	}

	return false
}

// SetEiWithholdingTaxCausal gets a reference to the given NullableString and assigns it to the EiWithholdingTaxCausal field.
func (o *IssuedDocument) SetEiWithholdingTaxCausal(v string) *IssuedDocument {
	o.EiWithholdingTaxCausal.Set(&v)
        return o
}
// SetEiWithholdingTaxCausalNil sets the value for EiWithholdingTaxCausal to be an explicit nil
func (o *IssuedDocument) SetEiWithholdingTaxCausalNil() *IssuedDocument {
	o.EiWithholdingTaxCausal.Set(nil)
    return o
}

// UnsetEiWithholdingTaxCausal ensures that no value is present for EiWithholdingTaxCausal, not even an explicit nil
func (o *IssuedDocument) UnsetEiWithholdingTaxCausal() {
	o.EiWithholdingTaxCausal.Unset()
}

// GetEiOtherWithholdingTaxType returns the EiOtherWithholdingTaxType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetEiOtherWithholdingTaxType() string {
	if o == nil || IsNil(o.EiOtherWithholdingTaxType.Get()) {
		var ret string
		return ret
	}
	return *o.EiOtherWithholdingTaxType.Get()
}

// GetEiOtherWithholdingTaxTypeOk returns a tuple with the EiOtherWithholdingTaxType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetEiOtherWithholdingTaxTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EiOtherWithholdingTaxType.Get(), o.EiOtherWithholdingTaxType.IsSet()
}

// HasEiOtherWithholdingTaxType returns a boolean if a field has been set.
func (o *IssuedDocument) HasEiOtherWithholdingTaxType() bool {
	if o != nil && o.EiOtherWithholdingTaxType.IsSet() {
		return true
	}

	return false
}

// SetEiOtherWithholdingTaxType gets a reference to the given NullableString and assigns it to the EiOtherWithholdingTaxType field.
func (o *IssuedDocument) SetEiOtherWithholdingTaxType(v string) *IssuedDocument {
	o.EiOtherWithholdingTaxType.Set(&v)
        return o
}
// SetEiOtherWithholdingTaxTypeNil sets the value for EiOtherWithholdingTaxType to be an explicit nil
func (o *IssuedDocument) SetEiOtherWithholdingTaxTypeNil() *IssuedDocument {
	o.EiOtherWithholdingTaxType.Set(nil)
    return o
}

// UnsetEiOtherWithholdingTaxType ensures that no value is present for EiOtherWithholdingTaxType, not even an explicit nil
func (o *IssuedDocument) UnsetEiOtherWithholdingTaxType() {
	o.EiOtherWithholdingTaxType.Unset()
}

// GetEiOtherWithholdingTaxCausal returns the EiOtherWithholdingTaxCausal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetEiOtherWithholdingTaxCausal() string {
	if o == nil || IsNil(o.EiOtherWithholdingTaxCausal.Get()) {
		var ret string
		return ret
	}
	return *o.EiOtherWithholdingTaxCausal.Get()
}

// GetEiOtherWithholdingTaxCausalOk returns a tuple with the EiOtherWithholdingTaxCausal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetEiOtherWithholdingTaxCausalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EiOtherWithholdingTaxCausal.Get(), o.EiOtherWithholdingTaxCausal.IsSet()
}

// HasEiOtherWithholdingTaxCausal returns a boolean if a field has been set.
func (o *IssuedDocument) HasEiOtherWithholdingTaxCausal() bool {
	if o != nil && o.EiOtherWithholdingTaxCausal.IsSet() {
		return true
	}

	return false
}

// SetEiOtherWithholdingTaxCausal gets a reference to the given NullableString and assigns it to the EiOtherWithholdingTaxCausal field.
func (o *IssuedDocument) SetEiOtherWithholdingTaxCausal(v string) *IssuedDocument {
	o.EiOtherWithholdingTaxCausal.Set(&v)
        return o
}
// SetEiOtherWithholdingTaxCausalNil sets the value for EiOtherWithholdingTaxCausal to be an explicit nil
func (o *IssuedDocument) SetEiOtherWithholdingTaxCausalNil() *IssuedDocument {
	o.EiOtherWithholdingTaxCausal.Set(nil)
    return o
}

// UnsetEiOtherWithholdingTaxCausal ensures that no value is present for EiOtherWithholdingTaxCausal, not even an explicit nil
func (o *IssuedDocument) UnsetEiOtherWithholdingTaxCausal() {
	o.EiOtherWithholdingTaxCausal.Unset()
}

// GetItemsList returns the ItemsList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetItemsList() []IssuedDocumentItemsListItem {
	if o == nil {
		var ret []IssuedDocumentItemsListItem
		return ret
	}
	return o.ItemsList
}

// GetItemsListOk returns a tuple with the ItemsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetItemsListOk() ([]IssuedDocumentItemsListItem, bool) {
	if o == nil || IsNil(o.ItemsList) {
		return nil, false
	}
	return o.ItemsList, true
}

// HasItemsList returns a boolean if a field has been set.
func (o *IssuedDocument) HasItemsList() bool {
	if o != nil && !IsNil(o.ItemsList) {
		return true
	}

	return false
}

// SetItemsList gets a reference to the given []IssuedDocumentItemsListItem and assigns it to the ItemsList field.
func (o *IssuedDocument) SetItemsList(v []IssuedDocumentItemsListItem) *IssuedDocument {
	o.ItemsList = v
        return o
}

// GetPaymentsList returns the PaymentsList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetPaymentsList() []IssuedDocumentPaymentsListItem {
	if o == nil {
		var ret []IssuedDocumentPaymentsListItem
		return ret
	}
	return o.PaymentsList
}

// GetPaymentsListOk returns a tuple with the PaymentsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetPaymentsListOk() ([]IssuedDocumentPaymentsListItem, bool) {
	if o == nil || IsNil(o.PaymentsList) {
		return nil, false
	}
	return o.PaymentsList, true
}

// HasPaymentsList returns a boolean if a field has been set.
func (o *IssuedDocument) HasPaymentsList() bool {
	if o != nil && !IsNil(o.PaymentsList) {
		return true
	}

	return false
}

// SetPaymentsList gets a reference to the given []IssuedDocumentPaymentsListItem and assigns it to the PaymentsList field.
func (o *IssuedDocument) SetPaymentsList(v []IssuedDocumentPaymentsListItem) *IssuedDocument {
	o.PaymentsList = v
        return o
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *IssuedDocument) GetTemplate() DocumentTemplate {
	if o == nil || IsNil(o.Template) {
		var ret DocumentTemplate
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuedDocument) GetTemplateOk() (*DocumentTemplate, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *IssuedDocument) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given DocumentTemplate and assigns it to the Template field.
func (o *IssuedDocument) SetTemplate(v DocumentTemplate) *IssuedDocument {
	o.Template = &v
        return o
}

// GetDeliveryNoteTemplate returns the DeliveryNoteTemplate field value if set, zero value otherwise.
func (o *IssuedDocument) GetDeliveryNoteTemplate() DocumentTemplate {
	if o == nil || IsNil(o.DeliveryNoteTemplate) {
		var ret DocumentTemplate
		return ret
	}
	return *o.DeliveryNoteTemplate
}

// GetDeliveryNoteTemplateOk returns a tuple with the DeliveryNoteTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuedDocument) GetDeliveryNoteTemplateOk() (*DocumentTemplate, bool) {
	if o == nil || IsNil(o.DeliveryNoteTemplate) {
		return nil, false
	}
	return o.DeliveryNoteTemplate, true
}

// HasDeliveryNoteTemplate returns a boolean if a field has been set.
func (o *IssuedDocument) HasDeliveryNoteTemplate() bool {
	if o != nil && !IsNil(o.DeliveryNoteTemplate) {
		return true
	}

	return false
}

// SetDeliveryNoteTemplate gets a reference to the given DocumentTemplate and assigns it to the DeliveryNoteTemplate field.
func (o *IssuedDocument) SetDeliveryNoteTemplate(v DocumentTemplate) *IssuedDocument {
	o.DeliveryNoteTemplate = &v
        return o
}

// GetAccInvTemplate returns the AccInvTemplate field value if set, zero value otherwise.
func (o *IssuedDocument) GetAccInvTemplate() DocumentTemplate {
	if o == nil || IsNil(o.AccInvTemplate) {
		var ret DocumentTemplate
		return ret
	}
	return *o.AccInvTemplate
}

// GetAccInvTemplateOk returns a tuple with the AccInvTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuedDocument) GetAccInvTemplateOk() (*DocumentTemplate, bool) {
	if o == nil || IsNil(o.AccInvTemplate) {
		return nil, false
	}
	return o.AccInvTemplate, true
}

// HasAccInvTemplate returns a boolean if a field has been set.
func (o *IssuedDocument) HasAccInvTemplate() bool {
	if o != nil && !IsNil(o.AccInvTemplate) {
		return true
	}

	return false
}

// SetAccInvTemplate gets a reference to the given DocumentTemplate and assigns it to the AccInvTemplate field.
func (o *IssuedDocument) SetAccInvTemplate(v DocumentTemplate) *IssuedDocument {
	o.AccInvTemplate = &v
        return o
}

// GetHMargins returns the HMargins field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetHMargins() int32 {
	if o == nil || IsNil(o.HMargins.Get()) {
		var ret int32
		return ret
	}
	return *o.HMargins.Get()
}

// GetHMarginsOk returns a tuple with the HMargins field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetHMarginsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HMargins.Get(), o.HMargins.IsSet()
}

// HasHMargins returns a boolean if a field has been set.
func (o *IssuedDocument) HasHMargins() bool {
	if o != nil && o.HMargins.IsSet() {
		return true
	}

	return false
}

// SetHMargins gets a reference to the given NullableInt32 and assigns it to the HMargins field.
func (o *IssuedDocument) SetHMargins(v int32) *IssuedDocument {
	o.HMargins.Set(&v)
        return o
}
// SetHMarginsNil sets the value for HMargins to be an explicit nil
func (o *IssuedDocument) SetHMarginsNil() *IssuedDocument {
	o.HMargins.Set(nil)
    return o
}

// UnsetHMargins ensures that no value is present for HMargins, not even an explicit nil
func (o *IssuedDocument) UnsetHMargins() {
	o.HMargins.Unset()
}

// GetVMargins returns the VMargins field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetVMargins() int32 {
	if o == nil || IsNil(o.VMargins.Get()) {
		var ret int32
		return ret
	}
	return *o.VMargins.Get()
}

// GetVMarginsOk returns a tuple with the VMargins field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetVMarginsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.VMargins.Get(), o.VMargins.IsSet()
}

// HasVMargins returns a boolean if a field has been set.
func (o *IssuedDocument) HasVMargins() bool {
	if o != nil && o.VMargins.IsSet() {
		return true
	}

	return false
}

// SetVMargins gets a reference to the given NullableInt32 and assigns it to the VMargins field.
func (o *IssuedDocument) SetVMargins(v int32) *IssuedDocument {
	o.VMargins.Set(&v)
        return o
}
// SetVMarginsNil sets the value for VMargins to be an explicit nil
func (o *IssuedDocument) SetVMarginsNil() *IssuedDocument {
	o.VMargins.Set(nil)
    return o
}

// UnsetVMargins ensures that no value is present for VMargins, not even an explicit nil
func (o *IssuedDocument) UnsetVMargins() {
	o.VMargins.Unset()
}

// GetShowPayments returns the ShowPayments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetShowPayments() bool {
	if o == nil || IsNil(o.ShowPayments.Get()) {
		var ret bool
		return ret
	}
	return *o.ShowPayments.Get()
}

// GetShowPaymentsOk returns a tuple with the ShowPayments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetShowPaymentsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShowPayments.Get(), o.ShowPayments.IsSet()
}

// HasShowPayments returns a boolean if a field has been set.
func (o *IssuedDocument) HasShowPayments() bool {
	if o != nil && o.ShowPayments.IsSet() {
		return true
	}

	return false
}

// SetShowPayments gets a reference to the given NullableBool and assigns it to the ShowPayments field.
func (o *IssuedDocument) SetShowPayments(v bool) *IssuedDocument {
	o.ShowPayments.Set(&v)
        return o
}
// SetShowPaymentsNil sets the value for ShowPayments to be an explicit nil
func (o *IssuedDocument) SetShowPaymentsNil() *IssuedDocument {
	o.ShowPayments.Set(nil)
    return o
}

// UnsetShowPayments ensures that no value is present for ShowPayments, not even an explicit nil
func (o *IssuedDocument) UnsetShowPayments() {
	o.ShowPayments.Unset()
}

// GetShowPaymentMethod returns the ShowPaymentMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetShowPaymentMethod() bool {
	if o == nil || IsNil(o.ShowPaymentMethod.Get()) {
		var ret bool
		return ret
	}
	return *o.ShowPaymentMethod.Get()
}

// GetShowPaymentMethodOk returns a tuple with the ShowPaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetShowPaymentMethodOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShowPaymentMethod.Get(), o.ShowPaymentMethod.IsSet()
}

// HasShowPaymentMethod returns a boolean if a field has been set.
func (o *IssuedDocument) HasShowPaymentMethod() bool {
	if o != nil && o.ShowPaymentMethod.IsSet() {
		return true
	}

	return false
}

// SetShowPaymentMethod gets a reference to the given NullableBool and assigns it to the ShowPaymentMethod field.
func (o *IssuedDocument) SetShowPaymentMethod(v bool) *IssuedDocument {
	o.ShowPaymentMethod.Set(&v)
        return o
}
// SetShowPaymentMethodNil sets the value for ShowPaymentMethod to be an explicit nil
func (o *IssuedDocument) SetShowPaymentMethodNil() *IssuedDocument {
	o.ShowPaymentMethod.Set(nil)
    return o
}

// UnsetShowPaymentMethod ensures that no value is present for ShowPaymentMethod, not even an explicit nil
func (o *IssuedDocument) UnsetShowPaymentMethod() {
	o.ShowPaymentMethod.Unset()
}

// GetShowTotals returns the ShowTotals field value if set, zero value otherwise.
func (o *IssuedDocument) GetShowTotals() ShowTotalsMode {
	if o == nil || IsNil(o.ShowTotals) {
		var ret ShowTotalsMode
		return ret
	}
	return *o.ShowTotals
}

// GetShowTotalsOk returns a tuple with the ShowTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuedDocument) GetShowTotalsOk() (*ShowTotalsMode, bool) {
	if o == nil || IsNil(o.ShowTotals) {
		return nil, false
	}
	return o.ShowTotals, true
}

// HasShowTotals returns a boolean if a field has been set.
func (o *IssuedDocument) HasShowTotals() bool {
	if o != nil && !IsNil(o.ShowTotals) {
		return true
	}

	return false
}

// SetShowTotals gets a reference to the given ShowTotalsMode and assigns it to the ShowTotals field.
func (o *IssuedDocument) SetShowTotals(v ShowTotalsMode) *IssuedDocument {
	o.ShowTotals = &v
        return o
}

// GetShowNotificationButton returns the ShowNotificationButton field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetShowNotificationButton() bool {
	if o == nil || IsNil(o.ShowNotificationButton.Get()) {
		var ret bool
		return ret
	}
	return *o.ShowNotificationButton.Get()
}

// GetShowNotificationButtonOk returns a tuple with the ShowNotificationButton field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetShowNotificationButtonOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShowNotificationButton.Get(), o.ShowNotificationButton.IsSet()
}

// HasShowNotificationButton returns a boolean if a field has been set.
func (o *IssuedDocument) HasShowNotificationButton() bool {
	if o != nil && o.ShowNotificationButton.IsSet() {
		return true
	}

	return false
}

// SetShowNotificationButton gets a reference to the given NullableBool and assigns it to the ShowNotificationButton field.
func (o *IssuedDocument) SetShowNotificationButton(v bool) *IssuedDocument {
	o.ShowNotificationButton.Set(&v)
        return o
}
// SetShowNotificationButtonNil sets the value for ShowNotificationButton to be an explicit nil
func (o *IssuedDocument) SetShowNotificationButtonNil() *IssuedDocument {
	o.ShowNotificationButton.Set(nil)
    return o
}

// UnsetShowNotificationButton ensures that no value is present for ShowNotificationButton, not even an explicit nil
func (o *IssuedDocument) UnsetShowNotificationButton() {
	o.ShowNotificationButton.Unset()
}

// GetShowTspayButton returns the ShowTspayButton field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetShowTspayButton() bool {
	if o == nil || IsNil(o.ShowTspayButton.Get()) {
		var ret bool
		return ret
	}
	return *o.ShowTspayButton.Get()
}

// GetShowTspayButtonOk returns a tuple with the ShowTspayButton field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetShowTspayButtonOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShowTspayButton.Get(), o.ShowTspayButton.IsSet()
}

// HasShowTspayButton returns a boolean if a field has been set.
func (o *IssuedDocument) HasShowTspayButton() bool {
	if o != nil && o.ShowTspayButton.IsSet() {
		return true
	}

	return false
}

// SetShowTspayButton gets a reference to the given NullableBool and assigns it to the ShowTspayButton field.
func (o *IssuedDocument) SetShowTspayButton(v bool) *IssuedDocument {
	o.ShowTspayButton.Set(&v)
        return o
}
// SetShowTspayButtonNil sets the value for ShowTspayButton to be an explicit nil
func (o *IssuedDocument) SetShowTspayButtonNil() *IssuedDocument {
	o.ShowTspayButton.Set(nil)
    return o
}

// UnsetShowTspayButton ensures that no value is present for ShowTspayButton, not even an explicit nil
func (o *IssuedDocument) UnsetShowTspayButton() {
	o.ShowTspayButton.Unset()
}

// GetDeliveryNote returns the DeliveryNote field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetDeliveryNote() bool {
	if o == nil || IsNil(o.DeliveryNote.Get()) {
		var ret bool
		return ret
	}
	return *o.DeliveryNote.Get()
}

// GetDeliveryNoteOk returns a tuple with the DeliveryNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetDeliveryNoteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeliveryNote.Get(), o.DeliveryNote.IsSet()
}

// HasDeliveryNote returns a boolean if a field has been set.
func (o *IssuedDocument) HasDeliveryNote() bool {
	if o != nil && o.DeliveryNote.IsSet() {
		return true
	}

	return false
}

// SetDeliveryNote gets a reference to the given NullableBool and assigns it to the DeliveryNote field.
func (o *IssuedDocument) SetDeliveryNote(v bool) *IssuedDocument {
	o.DeliveryNote.Set(&v)
        return o
}
// SetDeliveryNoteNil sets the value for DeliveryNote to be an explicit nil
func (o *IssuedDocument) SetDeliveryNoteNil() *IssuedDocument {
	o.DeliveryNote.Set(nil)
    return o
}

// UnsetDeliveryNote ensures that no value is present for DeliveryNote, not even an explicit nil
func (o *IssuedDocument) UnsetDeliveryNote() {
	o.DeliveryNote.Unset()
}

// GetAccompanyingInvoice returns the AccompanyingInvoice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAccompanyingInvoice() bool {
	if o == nil || IsNil(o.AccompanyingInvoice.Get()) {
		var ret bool
		return ret
	}
	return *o.AccompanyingInvoice.Get()
}

// GetAccompanyingInvoiceOk returns a tuple with the AccompanyingInvoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAccompanyingInvoiceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccompanyingInvoice.Get(), o.AccompanyingInvoice.IsSet()
}

// HasAccompanyingInvoice returns a boolean if a field has been set.
func (o *IssuedDocument) HasAccompanyingInvoice() bool {
	if o != nil && o.AccompanyingInvoice.IsSet() {
		return true
	}

	return false
}

// SetAccompanyingInvoice gets a reference to the given NullableBool and assigns it to the AccompanyingInvoice field.
func (o *IssuedDocument) SetAccompanyingInvoice(v bool) *IssuedDocument {
	o.AccompanyingInvoice.Set(&v)
        return o
}
// SetAccompanyingInvoiceNil sets the value for AccompanyingInvoice to be an explicit nil
func (o *IssuedDocument) SetAccompanyingInvoiceNil() *IssuedDocument {
	o.AccompanyingInvoice.Set(nil)
    return o
}

// UnsetAccompanyingInvoice ensures that no value is present for AccompanyingInvoice, not even an explicit nil
func (o *IssuedDocument) UnsetAccompanyingInvoice() {
	o.AccompanyingInvoice.Unset()
}

// GetDnNumber returns the DnNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetDnNumber() int32 {
	if o == nil || IsNil(o.DnNumber.Get()) {
		var ret int32
		return ret
	}
	return *o.DnNumber.Get()
}

// GetDnNumberOk returns a tuple with the DnNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetDnNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnNumber.Get(), o.DnNumber.IsSet()
}

// HasDnNumber returns a boolean if a field has been set.
func (o *IssuedDocument) HasDnNumber() bool {
	if o != nil && o.DnNumber.IsSet() {
		return true
	}

	return false
}

// SetDnNumber gets a reference to the given NullableInt32 and assigns it to the DnNumber field.
func (o *IssuedDocument) SetDnNumber(v int32) *IssuedDocument {
	o.DnNumber.Set(&v)
        return o
}
// SetDnNumberNil sets the value for DnNumber to be an explicit nil
func (o *IssuedDocument) SetDnNumberNil() *IssuedDocument {
	o.DnNumber.Set(nil)
    return o
}

// UnsetDnNumber ensures that no value is present for DnNumber, not even an explicit nil
func (o *IssuedDocument) UnsetDnNumber() {
	o.DnNumber.Unset()
}

// GetDnDate returns the DnDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetDnDate() string {
	if o == nil || IsNil(o.DnDate.Get()) {
		var ret string
		return ret
	}
	return *o.DnDate.Get()
}

// GetDnDateOk returns a tuple with the DnDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetDnDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnDate.Get(), o.DnDate.IsSet()
}

// HasDnDate returns a boolean if a field has been set.
func (o *IssuedDocument) HasDnDate() bool {
	if o != nil && o.DnDate.IsSet() {
		return true
	}

	return false
}

// SetDnDate gets a reference to the given NullableString and assigns it to the DnDate field.
func (o *IssuedDocument) SetDnDate(v string) *IssuedDocument {
	o.DnDate.Set(&v)
        return o
}
// SetDnDateNil sets the value for DnDate to be an explicit nil
func (o *IssuedDocument) SetDnDateNil() *IssuedDocument {
	o.DnDate.Set(nil)
    return o
}

// UnsetDnDate ensures that no value is present for DnDate, not even an explicit nil
func (o *IssuedDocument) UnsetDnDate() {
	o.DnDate.Unset()
}

// GetDnAiPackagesNumber returns the DnAiPackagesNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetDnAiPackagesNumber() string {
	if o == nil || IsNil(o.DnAiPackagesNumber.Get()) {
		var ret string
		return ret
	}
	return *o.DnAiPackagesNumber.Get()
}

// GetDnAiPackagesNumberOk returns a tuple with the DnAiPackagesNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetDnAiPackagesNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnAiPackagesNumber.Get(), o.DnAiPackagesNumber.IsSet()
}

// HasDnAiPackagesNumber returns a boolean if a field has been set.
func (o *IssuedDocument) HasDnAiPackagesNumber() bool {
	if o != nil && o.DnAiPackagesNumber.IsSet() {
		return true
	}

	return false
}

// SetDnAiPackagesNumber gets a reference to the given NullableString and assigns it to the DnAiPackagesNumber field.
func (o *IssuedDocument) SetDnAiPackagesNumber(v string) *IssuedDocument {
	o.DnAiPackagesNumber.Set(&v)
        return o
}
// SetDnAiPackagesNumberNil sets the value for DnAiPackagesNumber to be an explicit nil
func (o *IssuedDocument) SetDnAiPackagesNumberNil() *IssuedDocument {
	o.DnAiPackagesNumber.Set(nil)
    return o
}

// UnsetDnAiPackagesNumber ensures that no value is present for DnAiPackagesNumber, not even an explicit nil
func (o *IssuedDocument) UnsetDnAiPackagesNumber() {
	o.DnAiPackagesNumber.Unset()
}

// GetDnAiWeight returns the DnAiWeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetDnAiWeight() string {
	if o == nil || IsNil(o.DnAiWeight.Get()) {
		var ret string
		return ret
	}
	return *o.DnAiWeight.Get()
}

// GetDnAiWeightOk returns a tuple with the DnAiWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetDnAiWeightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnAiWeight.Get(), o.DnAiWeight.IsSet()
}

// HasDnAiWeight returns a boolean if a field has been set.
func (o *IssuedDocument) HasDnAiWeight() bool {
	if o != nil && o.DnAiWeight.IsSet() {
		return true
	}

	return false
}

// SetDnAiWeight gets a reference to the given NullableString and assigns it to the DnAiWeight field.
func (o *IssuedDocument) SetDnAiWeight(v string) *IssuedDocument {
	o.DnAiWeight.Set(&v)
        return o
}
// SetDnAiWeightNil sets the value for DnAiWeight to be an explicit nil
func (o *IssuedDocument) SetDnAiWeightNil() *IssuedDocument {
	o.DnAiWeight.Set(nil)
    return o
}

// UnsetDnAiWeight ensures that no value is present for DnAiWeight, not even an explicit nil
func (o *IssuedDocument) UnsetDnAiWeight() {
	o.DnAiWeight.Unset()
}

// GetDnAiCausal returns the DnAiCausal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetDnAiCausal() string {
	if o == nil || IsNil(o.DnAiCausal.Get()) {
		var ret string
		return ret
	}
	return *o.DnAiCausal.Get()
}

// GetDnAiCausalOk returns a tuple with the DnAiCausal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetDnAiCausalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnAiCausal.Get(), o.DnAiCausal.IsSet()
}

// HasDnAiCausal returns a boolean if a field has been set.
func (o *IssuedDocument) HasDnAiCausal() bool {
	if o != nil && o.DnAiCausal.IsSet() {
		return true
	}

	return false
}

// SetDnAiCausal gets a reference to the given NullableString and assigns it to the DnAiCausal field.
func (o *IssuedDocument) SetDnAiCausal(v string) *IssuedDocument {
	o.DnAiCausal.Set(&v)
        return o
}
// SetDnAiCausalNil sets the value for DnAiCausal to be an explicit nil
func (o *IssuedDocument) SetDnAiCausalNil() *IssuedDocument {
	o.DnAiCausal.Set(nil)
    return o
}

// UnsetDnAiCausal ensures that no value is present for DnAiCausal, not even an explicit nil
func (o *IssuedDocument) UnsetDnAiCausal() {
	o.DnAiCausal.Unset()
}

// GetDnAiDestination returns the DnAiDestination field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetDnAiDestination() string {
	if o == nil || IsNil(o.DnAiDestination.Get()) {
		var ret string
		return ret
	}
	return *o.DnAiDestination.Get()
}

// GetDnAiDestinationOk returns a tuple with the DnAiDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetDnAiDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnAiDestination.Get(), o.DnAiDestination.IsSet()
}

// HasDnAiDestination returns a boolean if a field has been set.
func (o *IssuedDocument) HasDnAiDestination() bool {
	if o != nil && o.DnAiDestination.IsSet() {
		return true
	}

	return false
}

// SetDnAiDestination gets a reference to the given NullableString and assigns it to the DnAiDestination field.
func (o *IssuedDocument) SetDnAiDestination(v string) *IssuedDocument {
	o.DnAiDestination.Set(&v)
        return o
}
// SetDnAiDestinationNil sets the value for DnAiDestination to be an explicit nil
func (o *IssuedDocument) SetDnAiDestinationNil() *IssuedDocument {
	o.DnAiDestination.Set(nil)
    return o
}

// UnsetDnAiDestination ensures that no value is present for DnAiDestination, not even an explicit nil
func (o *IssuedDocument) UnsetDnAiDestination() {
	o.DnAiDestination.Unset()
}

// GetDnAiTransporter returns the DnAiTransporter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetDnAiTransporter() string {
	if o == nil || IsNil(o.DnAiTransporter.Get()) {
		var ret string
		return ret
	}
	return *o.DnAiTransporter.Get()
}

// GetDnAiTransporterOk returns a tuple with the DnAiTransporter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetDnAiTransporterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnAiTransporter.Get(), o.DnAiTransporter.IsSet()
}

// HasDnAiTransporter returns a boolean if a field has been set.
func (o *IssuedDocument) HasDnAiTransporter() bool {
	if o != nil && o.DnAiTransporter.IsSet() {
		return true
	}

	return false
}

// SetDnAiTransporter gets a reference to the given NullableString and assigns it to the DnAiTransporter field.
func (o *IssuedDocument) SetDnAiTransporter(v string) *IssuedDocument {
	o.DnAiTransporter.Set(&v)
        return o
}
// SetDnAiTransporterNil sets the value for DnAiTransporter to be an explicit nil
func (o *IssuedDocument) SetDnAiTransporterNil() *IssuedDocument {
	o.DnAiTransporter.Set(nil)
    return o
}

// UnsetDnAiTransporter ensures that no value is present for DnAiTransporter, not even an explicit nil
func (o *IssuedDocument) UnsetDnAiTransporter() {
	o.DnAiTransporter.Unset()
}

// GetDnAiNotes returns the DnAiNotes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetDnAiNotes() string {
	if o == nil || IsNil(o.DnAiNotes.Get()) {
		var ret string
		return ret
	}
	return *o.DnAiNotes.Get()
}

// GetDnAiNotesOk returns a tuple with the DnAiNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetDnAiNotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnAiNotes.Get(), o.DnAiNotes.IsSet()
}

// HasDnAiNotes returns a boolean if a field has been set.
func (o *IssuedDocument) HasDnAiNotes() bool {
	if o != nil && o.DnAiNotes.IsSet() {
		return true
	}

	return false
}

// SetDnAiNotes gets a reference to the given NullableString and assigns it to the DnAiNotes field.
func (o *IssuedDocument) SetDnAiNotes(v string) *IssuedDocument {
	o.DnAiNotes.Set(&v)
        return o
}
// SetDnAiNotesNil sets the value for DnAiNotes to be an explicit nil
func (o *IssuedDocument) SetDnAiNotesNil() *IssuedDocument {
	o.DnAiNotes.Set(nil)
    return o
}

// UnsetDnAiNotes ensures that no value is present for DnAiNotes, not even an explicit nil
func (o *IssuedDocument) UnsetDnAiNotes() {
	o.DnAiNotes.Unset()
}

// GetIsMarked returns the IsMarked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetIsMarked() bool {
	if o == nil || IsNil(o.IsMarked.Get()) {
		var ret bool
		return ret
	}
	return *o.IsMarked.Get()
}

// GetIsMarkedOk returns a tuple with the IsMarked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetIsMarkedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsMarked.Get(), o.IsMarked.IsSet()
}

// HasIsMarked returns a boolean if a field has been set.
func (o *IssuedDocument) HasIsMarked() bool {
	if o != nil && o.IsMarked.IsSet() {
		return true
	}

	return false
}

// SetIsMarked gets a reference to the given NullableBool and assigns it to the IsMarked field.
func (o *IssuedDocument) SetIsMarked(v bool) *IssuedDocument {
	o.IsMarked.Set(&v)
        return o
}
// SetIsMarkedNil sets the value for IsMarked to be an explicit nil
func (o *IssuedDocument) SetIsMarkedNil() *IssuedDocument {
	o.IsMarked.Set(nil)
    return o
}

// UnsetIsMarked ensures that no value is present for IsMarked, not even an explicit nil
func (o *IssuedDocument) UnsetIsMarked() {
	o.IsMarked.Unset()
}

// GetAmountNet returns the AmountNet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAmountNet() float32 {
	if o == nil || IsNil(o.AmountNet.Get()) {
		var ret float32
		return ret
	}
	return *o.AmountNet.Get()
}

// GetAmountNetOk returns a tuple with the AmountNet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAmountNetOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountNet.Get(), o.AmountNet.IsSet()
}

// HasAmountNet returns a boolean if a field has been set.
func (o *IssuedDocument) HasAmountNet() bool {
	if o != nil && o.AmountNet.IsSet() {
		return true
	}

	return false
}

// SetAmountNet gets a reference to the given NullableFloat32 and assigns it to the AmountNet field.
func (o *IssuedDocument) SetAmountNet(v float32) *IssuedDocument {
	o.AmountNet.Set(&v)
        return o
}
// SetAmountNetNil sets the value for AmountNet to be an explicit nil
func (o *IssuedDocument) SetAmountNetNil() *IssuedDocument {
	o.AmountNet.Set(nil)
    return o
}

// UnsetAmountNet ensures that no value is present for AmountNet, not even an explicit nil
func (o *IssuedDocument) UnsetAmountNet() {
	o.AmountNet.Unset()
}

// GetAmountVat returns the AmountVat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAmountVat() float32 {
	if o == nil || IsNil(o.AmountVat.Get()) {
		var ret float32
		return ret
	}
	return *o.AmountVat.Get()
}

// GetAmountVatOk returns a tuple with the AmountVat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAmountVatOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountVat.Get(), o.AmountVat.IsSet()
}

// HasAmountVat returns a boolean if a field has been set.
func (o *IssuedDocument) HasAmountVat() bool {
	if o != nil && o.AmountVat.IsSet() {
		return true
	}

	return false
}

// SetAmountVat gets a reference to the given NullableFloat32 and assigns it to the AmountVat field.
func (o *IssuedDocument) SetAmountVat(v float32) *IssuedDocument {
	o.AmountVat.Set(&v)
        return o
}
// SetAmountVatNil sets the value for AmountVat to be an explicit nil
func (o *IssuedDocument) SetAmountVatNil() *IssuedDocument {
	o.AmountVat.Set(nil)
    return o
}

// UnsetAmountVat ensures that no value is present for AmountVat, not even an explicit nil
func (o *IssuedDocument) UnsetAmountVat() {
	o.AmountVat.Unset()
}

// GetAmountGross returns the AmountGross field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAmountGross() float32 {
	if o == nil || IsNil(o.AmountGross.Get()) {
		var ret float32
		return ret
	}
	return *o.AmountGross.Get()
}

// GetAmountGrossOk returns a tuple with the AmountGross field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAmountGrossOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountGross.Get(), o.AmountGross.IsSet()
}

// HasAmountGross returns a boolean if a field has been set.
func (o *IssuedDocument) HasAmountGross() bool {
	if o != nil && o.AmountGross.IsSet() {
		return true
	}

	return false
}

// SetAmountGross gets a reference to the given NullableFloat32 and assigns it to the AmountGross field.
func (o *IssuedDocument) SetAmountGross(v float32) *IssuedDocument {
	o.AmountGross.Set(&v)
        return o
}
// SetAmountGrossNil sets the value for AmountGross to be an explicit nil
func (o *IssuedDocument) SetAmountGrossNil() *IssuedDocument {
	o.AmountGross.Set(nil)
    return o
}

// UnsetAmountGross ensures that no value is present for AmountGross, not even an explicit nil
func (o *IssuedDocument) UnsetAmountGross() {
	o.AmountGross.Unset()
}

// GetAmountDueDiscount returns the AmountDueDiscount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAmountDueDiscount() float32 {
	if o == nil || IsNil(o.AmountDueDiscount.Get()) {
		var ret float32
		return ret
	}
	return *o.AmountDueDiscount.Get()
}

// GetAmountDueDiscountOk returns a tuple with the AmountDueDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAmountDueDiscountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountDueDiscount.Get(), o.AmountDueDiscount.IsSet()
}

// HasAmountDueDiscount returns a boolean if a field has been set.
func (o *IssuedDocument) HasAmountDueDiscount() bool {
	if o != nil && o.AmountDueDiscount.IsSet() {
		return true
	}

	return false
}

// SetAmountDueDiscount gets a reference to the given NullableFloat32 and assigns it to the AmountDueDiscount field.
func (o *IssuedDocument) SetAmountDueDiscount(v float32) *IssuedDocument {
	o.AmountDueDiscount.Set(&v)
        return o
}
// SetAmountDueDiscountNil sets the value for AmountDueDiscount to be an explicit nil
func (o *IssuedDocument) SetAmountDueDiscountNil() *IssuedDocument {
	o.AmountDueDiscount.Set(nil)
    return o
}

// UnsetAmountDueDiscount ensures that no value is present for AmountDueDiscount, not even an explicit nil
func (o *IssuedDocument) UnsetAmountDueDiscount() {
	o.AmountDueDiscount.Unset()
}

// GetAmountRivalsa returns the AmountRivalsa field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAmountRivalsa() float32 {
	if o == nil || IsNil(o.AmountRivalsa.Get()) {
		var ret float32
		return ret
	}
	return *o.AmountRivalsa.Get()
}

// GetAmountRivalsaOk returns a tuple with the AmountRivalsa field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAmountRivalsaOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountRivalsa.Get(), o.AmountRivalsa.IsSet()
}

// HasAmountRivalsa returns a boolean if a field has been set.
func (o *IssuedDocument) HasAmountRivalsa() bool {
	if o != nil && o.AmountRivalsa.IsSet() {
		return true
	}

	return false
}

// SetAmountRivalsa gets a reference to the given NullableFloat32 and assigns it to the AmountRivalsa field.
func (o *IssuedDocument) SetAmountRivalsa(v float32) *IssuedDocument {
	o.AmountRivalsa.Set(&v)
        return o
}
// SetAmountRivalsaNil sets the value for AmountRivalsa to be an explicit nil
func (o *IssuedDocument) SetAmountRivalsaNil() *IssuedDocument {
	o.AmountRivalsa.Set(nil)
    return o
}

// UnsetAmountRivalsa ensures that no value is present for AmountRivalsa, not even an explicit nil
func (o *IssuedDocument) UnsetAmountRivalsa() {
	o.AmountRivalsa.Unset()
}

// GetAmountRivalsaTaxable returns the AmountRivalsaTaxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAmountRivalsaTaxable() float32 {
	if o == nil || IsNil(o.AmountRivalsaTaxable.Get()) {
		var ret float32
		return ret
	}
	return *o.AmountRivalsaTaxable.Get()
}

// GetAmountRivalsaTaxableOk returns a tuple with the AmountRivalsaTaxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAmountRivalsaTaxableOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountRivalsaTaxable.Get(), o.AmountRivalsaTaxable.IsSet()
}

// HasAmountRivalsaTaxable returns a boolean if a field has been set.
func (o *IssuedDocument) HasAmountRivalsaTaxable() bool {
	if o != nil && o.AmountRivalsaTaxable.IsSet() {
		return true
	}

	return false
}

// SetAmountRivalsaTaxable gets a reference to the given NullableFloat32 and assigns it to the AmountRivalsaTaxable field.
func (o *IssuedDocument) SetAmountRivalsaTaxable(v float32) *IssuedDocument {
	o.AmountRivalsaTaxable.Set(&v)
        return o
}
// SetAmountRivalsaTaxableNil sets the value for AmountRivalsaTaxable to be an explicit nil
func (o *IssuedDocument) SetAmountRivalsaTaxableNil() *IssuedDocument {
	o.AmountRivalsaTaxable.Set(nil)
    return o
}

// UnsetAmountRivalsaTaxable ensures that no value is present for AmountRivalsaTaxable, not even an explicit nil
func (o *IssuedDocument) UnsetAmountRivalsaTaxable() {
	o.AmountRivalsaTaxable.Unset()
}

// GetAmountWithholdingTax returns the AmountWithholdingTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAmountWithholdingTax() float32 {
	if o == nil || IsNil(o.AmountWithholdingTax.Get()) {
		var ret float32
		return ret
	}
	return *o.AmountWithholdingTax.Get()
}

// GetAmountWithholdingTaxOk returns a tuple with the AmountWithholdingTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAmountWithholdingTaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountWithholdingTax.Get(), o.AmountWithholdingTax.IsSet()
}

// HasAmountWithholdingTax returns a boolean if a field has been set.
func (o *IssuedDocument) HasAmountWithholdingTax() bool {
	if o != nil && o.AmountWithholdingTax.IsSet() {
		return true
	}

	return false
}

// SetAmountWithholdingTax gets a reference to the given NullableFloat32 and assigns it to the AmountWithholdingTax field.
func (o *IssuedDocument) SetAmountWithholdingTax(v float32) *IssuedDocument {
	o.AmountWithholdingTax.Set(&v)
        return o
}
// SetAmountWithholdingTaxNil sets the value for AmountWithholdingTax to be an explicit nil
func (o *IssuedDocument) SetAmountWithholdingTaxNil() *IssuedDocument {
	o.AmountWithholdingTax.Set(nil)
    return o
}

// UnsetAmountWithholdingTax ensures that no value is present for AmountWithholdingTax, not even an explicit nil
func (o *IssuedDocument) UnsetAmountWithholdingTax() {
	o.AmountWithholdingTax.Unset()
}

// GetAmountWithholdingTaxTaxable returns the AmountWithholdingTaxTaxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAmountWithholdingTaxTaxable() float32 {
	if o == nil || IsNil(o.AmountWithholdingTaxTaxable.Get()) {
		var ret float32
		return ret
	}
	return *o.AmountWithholdingTaxTaxable.Get()
}

// GetAmountWithholdingTaxTaxableOk returns a tuple with the AmountWithholdingTaxTaxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAmountWithholdingTaxTaxableOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountWithholdingTaxTaxable.Get(), o.AmountWithholdingTaxTaxable.IsSet()
}

// HasAmountWithholdingTaxTaxable returns a boolean if a field has been set.
func (o *IssuedDocument) HasAmountWithholdingTaxTaxable() bool {
	if o != nil && o.AmountWithholdingTaxTaxable.IsSet() {
		return true
	}

	return false
}

// SetAmountWithholdingTaxTaxable gets a reference to the given NullableFloat32 and assigns it to the AmountWithholdingTaxTaxable field.
func (o *IssuedDocument) SetAmountWithholdingTaxTaxable(v float32) *IssuedDocument {
	o.AmountWithholdingTaxTaxable.Set(&v)
        return o
}
// SetAmountWithholdingTaxTaxableNil sets the value for AmountWithholdingTaxTaxable to be an explicit nil
func (o *IssuedDocument) SetAmountWithholdingTaxTaxableNil() *IssuedDocument {
	o.AmountWithholdingTaxTaxable.Set(nil)
    return o
}

// UnsetAmountWithholdingTaxTaxable ensures that no value is present for AmountWithholdingTaxTaxable, not even an explicit nil
func (o *IssuedDocument) UnsetAmountWithholdingTaxTaxable() {
	o.AmountWithholdingTaxTaxable.Unset()
}

// GetAmountOtherWithholdingTax returns the AmountOtherWithholdingTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAmountOtherWithholdingTax() float32 {
	if o == nil || IsNil(o.AmountOtherWithholdingTax.Get()) {
		var ret float32
		return ret
	}
	return *o.AmountOtherWithholdingTax.Get()
}

// GetAmountOtherWithholdingTaxOk returns a tuple with the AmountOtherWithholdingTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAmountOtherWithholdingTaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountOtherWithholdingTax.Get(), o.AmountOtherWithholdingTax.IsSet()
}

// HasAmountOtherWithholdingTax returns a boolean if a field has been set.
func (o *IssuedDocument) HasAmountOtherWithholdingTax() bool {
	if o != nil && o.AmountOtherWithholdingTax.IsSet() {
		return true
	}

	return false
}

// SetAmountOtherWithholdingTax gets a reference to the given NullableFloat32 and assigns it to the AmountOtherWithholdingTax field.
func (o *IssuedDocument) SetAmountOtherWithholdingTax(v float32) *IssuedDocument {
	o.AmountOtherWithholdingTax.Set(&v)
        return o
}
// SetAmountOtherWithholdingTaxNil sets the value for AmountOtherWithholdingTax to be an explicit nil
func (o *IssuedDocument) SetAmountOtherWithholdingTaxNil() *IssuedDocument {
	o.AmountOtherWithholdingTax.Set(nil)
    return o
}

// UnsetAmountOtherWithholdingTax ensures that no value is present for AmountOtherWithholdingTax, not even an explicit nil
func (o *IssuedDocument) UnsetAmountOtherWithholdingTax() {
	o.AmountOtherWithholdingTax.Unset()
}

// GetAmountOtherWithholdingTaxTaxable returns the AmountOtherWithholdingTaxTaxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAmountOtherWithholdingTaxTaxable() float32 {
	if o == nil || IsNil(o.AmountOtherWithholdingTaxTaxable.Get()) {
		var ret float32
		return ret
	}
	return *o.AmountOtherWithholdingTaxTaxable.Get()
}

// GetAmountOtherWithholdingTaxTaxableOk returns a tuple with the AmountOtherWithholdingTaxTaxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAmountOtherWithholdingTaxTaxableOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountOtherWithholdingTaxTaxable.Get(), o.AmountOtherWithholdingTaxTaxable.IsSet()
}

// HasAmountOtherWithholdingTaxTaxable returns a boolean if a field has been set.
func (o *IssuedDocument) HasAmountOtherWithholdingTaxTaxable() bool {
	if o != nil && o.AmountOtherWithholdingTaxTaxable.IsSet() {
		return true
	}

	return false
}

// SetAmountOtherWithholdingTaxTaxable gets a reference to the given NullableFloat32 and assigns it to the AmountOtherWithholdingTaxTaxable field.
func (o *IssuedDocument) SetAmountOtherWithholdingTaxTaxable(v float32) *IssuedDocument {
	o.AmountOtherWithholdingTaxTaxable.Set(&v)
        return o
}
// SetAmountOtherWithholdingTaxTaxableNil sets the value for AmountOtherWithholdingTaxTaxable to be an explicit nil
func (o *IssuedDocument) SetAmountOtherWithholdingTaxTaxableNil() *IssuedDocument {
	o.AmountOtherWithholdingTaxTaxable.Set(nil)
    return o
}

// UnsetAmountOtherWithholdingTaxTaxable ensures that no value is present for AmountOtherWithholdingTaxTaxable, not even an explicit nil
func (o *IssuedDocument) UnsetAmountOtherWithholdingTaxTaxable() {
	o.AmountOtherWithholdingTaxTaxable.Unset()
}

// GetAmountEnasarcoTaxable returns the AmountEnasarcoTaxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAmountEnasarcoTaxable() float32 {
	if o == nil || IsNil(o.AmountEnasarcoTaxable.Get()) {
		var ret float32
		return ret
	}
	return *o.AmountEnasarcoTaxable.Get()
}

// GetAmountEnasarcoTaxableOk returns a tuple with the AmountEnasarcoTaxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAmountEnasarcoTaxableOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountEnasarcoTaxable.Get(), o.AmountEnasarcoTaxable.IsSet()
}

// HasAmountEnasarcoTaxable returns a boolean if a field has been set.
func (o *IssuedDocument) HasAmountEnasarcoTaxable() bool {
	if o != nil && o.AmountEnasarcoTaxable.IsSet() {
		return true
	}

	return false
}

// SetAmountEnasarcoTaxable gets a reference to the given NullableFloat32 and assigns it to the AmountEnasarcoTaxable field.
func (o *IssuedDocument) SetAmountEnasarcoTaxable(v float32) *IssuedDocument {
	o.AmountEnasarcoTaxable.Set(&v)
        return o
}
// SetAmountEnasarcoTaxableNil sets the value for AmountEnasarcoTaxable to be an explicit nil
func (o *IssuedDocument) SetAmountEnasarcoTaxableNil() *IssuedDocument {
	o.AmountEnasarcoTaxable.Set(nil)
    return o
}

// UnsetAmountEnasarcoTaxable ensures that no value is present for AmountEnasarcoTaxable, not even an explicit nil
func (o *IssuedDocument) UnsetAmountEnasarcoTaxable() {
	o.AmountEnasarcoTaxable.Unset()
}

// GetExtraData returns the ExtraData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetExtraData() IssuedDocumentExtraData {
	if o == nil || IsNil(o.ExtraData.Get()) {
		var ret IssuedDocumentExtraData
		return ret
	}
	return *o.ExtraData.Get()
}

// GetExtraDataOk returns a tuple with the ExtraData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetExtraDataOk() (*IssuedDocumentExtraData, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtraData.Get(), o.ExtraData.IsSet()
}

// HasExtraData returns a boolean if a field has been set.
func (o *IssuedDocument) HasExtraData() bool {
	if o != nil && o.ExtraData.IsSet() {
		return true
	}

	return false
}

// SetExtraData gets a reference to the given NullableIssuedDocumentExtraData and assigns it to the ExtraData field.
func (o *IssuedDocument) SetExtraData(v IssuedDocumentExtraData) *IssuedDocument {
	o.ExtraData.Set(&v)
        return o
}
// SetExtraDataNil sets the value for ExtraData to be an explicit nil
func (o *IssuedDocument) SetExtraDataNil() *IssuedDocument {
	o.ExtraData.Set(nil)
    return o
}

// UnsetExtraData ensures that no value is present for ExtraData, not even an explicit nil
func (o *IssuedDocument) UnsetExtraData() {
	o.ExtraData.Unset()
}

// GetSeenDate returns the SeenDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetSeenDate() string {
	if o == nil || IsNil(o.SeenDate.Get()) {
		var ret string
		return ret
	}
	return *o.SeenDate.Get()
}

// GetSeenDateOk returns a tuple with the SeenDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetSeenDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeenDate.Get(), o.SeenDate.IsSet()
}

// HasSeenDate returns a boolean if a field has been set.
func (o *IssuedDocument) HasSeenDate() bool {
	if o != nil && o.SeenDate.IsSet() {
		return true
	}

	return false
}

// SetSeenDate gets a reference to the given NullableString and assigns it to the SeenDate field.
func (o *IssuedDocument) SetSeenDate(v string) *IssuedDocument {
	o.SeenDate.Set(&v)
        return o
}
// SetSeenDateNil sets the value for SeenDate to be an explicit nil
func (o *IssuedDocument) SetSeenDateNil() *IssuedDocument {
	o.SeenDate.Set(nil)
    return o
}

// UnsetSeenDate ensures that no value is present for SeenDate, not even an explicit nil
func (o *IssuedDocument) UnsetSeenDate() {
	o.SeenDate.Unset()
}

// GetNextDueDate returns the NextDueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetNextDueDate() string {
	if o == nil || IsNil(o.NextDueDate.Get()) {
		var ret string
		return ret
	}
	return *o.NextDueDate.Get()
}

// GetNextDueDateOk returns a tuple with the NextDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetNextDueDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NextDueDate.Get(), o.NextDueDate.IsSet()
}

// HasNextDueDate returns a boolean if a field has been set.
func (o *IssuedDocument) HasNextDueDate() bool {
	if o != nil && o.NextDueDate.IsSet() {
		return true
	}

	return false
}

// SetNextDueDate gets a reference to the given NullableString and assigns it to the NextDueDate field.
func (o *IssuedDocument) SetNextDueDate(v string) *IssuedDocument {
	o.NextDueDate.Set(&v)
        return o
}
// SetNextDueDateNil sets the value for NextDueDate to be an explicit nil
func (o *IssuedDocument) SetNextDueDateNil() *IssuedDocument {
	o.NextDueDate.Set(nil)
    return o
}

// UnsetNextDueDate ensures that no value is present for NextDueDate, not even an explicit nil
func (o *IssuedDocument) UnsetNextDueDate() {
	o.NextDueDate.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *IssuedDocument) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *IssuedDocument) SetUrl(v string) *IssuedDocument {
	o.Url.Set(&v)
        return o
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *IssuedDocument) SetUrlNil() *IssuedDocument {
	o.Url.Set(nil)
    return o
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *IssuedDocument) UnsetUrl() {
	o.Url.Unset()
}

// GetDnUrl returns the DnUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetDnUrl() string {
	if o == nil || IsNil(o.DnUrl.Get()) {
		var ret string
		return ret
	}
	return *o.DnUrl.Get()
}

// GetDnUrlOk returns a tuple with the DnUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetDnUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnUrl.Get(), o.DnUrl.IsSet()
}

// HasDnUrl returns a boolean if a field has been set.
func (o *IssuedDocument) HasDnUrl() bool {
	if o != nil && o.DnUrl.IsSet() {
		return true
	}

	return false
}

// SetDnUrl gets a reference to the given NullableString and assigns it to the DnUrl field.
func (o *IssuedDocument) SetDnUrl(v string) *IssuedDocument {
	o.DnUrl.Set(&v)
        return o
}
// SetDnUrlNil sets the value for DnUrl to be an explicit nil
func (o *IssuedDocument) SetDnUrlNil() *IssuedDocument {
	o.DnUrl.Set(nil)
    return o
}

// UnsetDnUrl ensures that no value is present for DnUrl, not even an explicit nil
func (o *IssuedDocument) UnsetDnUrl() {
	o.DnUrl.Unset()
}

// GetAiUrl returns the AiUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAiUrl() string {
	if o == nil || IsNil(o.AiUrl.Get()) {
		var ret string
		return ret
	}
	return *o.AiUrl.Get()
}

// GetAiUrlOk returns a tuple with the AiUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAiUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AiUrl.Get(), o.AiUrl.IsSet()
}

// HasAiUrl returns a boolean if a field has been set.
func (o *IssuedDocument) HasAiUrl() bool {
	if o != nil && o.AiUrl.IsSet() {
		return true
	}

	return false
}

// SetAiUrl gets a reference to the given NullableString and assigns it to the AiUrl field.
func (o *IssuedDocument) SetAiUrl(v string) *IssuedDocument {
	o.AiUrl.Set(&v)
        return o
}
// SetAiUrlNil sets the value for AiUrl to be an explicit nil
func (o *IssuedDocument) SetAiUrlNil() *IssuedDocument {
	o.AiUrl.Set(nil)
    return o
}

// UnsetAiUrl ensures that no value is present for AiUrl, not even an explicit nil
func (o *IssuedDocument) UnsetAiUrl() {
	o.AiUrl.Unset()
}

// GetAttachmentUrl returns the AttachmentUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAttachmentUrl() string {
	if o == nil || IsNil(o.AttachmentUrl.Get()) {
		var ret string
		return ret
	}
	return *o.AttachmentUrl.Get()
}

// GetAttachmentUrlOk returns a tuple with the AttachmentUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAttachmentUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AttachmentUrl.Get(), o.AttachmentUrl.IsSet()
}

// HasAttachmentUrl returns a boolean if a field has been set.
func (o *IssuedDocument) HasAttachmentUrl() bool {
	if o != nil && o.AttachmentUrl.IsSet() {
		return true
	}

	return false
}

// SetAttachmentUrl gets a reference to the given NullableString and assigns it to the AttachmentUrl field.
func (o *IssuedDocument) SetAttachmentUrl(v string) *IssuedDocument {
	o.AttachmentUrl.Set(&v)
        return o
}
// SetAttachmentUrlNil sets the value for AttachmentUrl to be an explicit nil
func (o *IssuedDocument) SetAttachmentUrlNil() *IssuedDocument {
	o.AttachmentUrl.Set(nil)
    return o
}

// UnsetAttachmentUrl ensures that no value is present for AttachmentUrl, not even an explicit nil
func (o *IssuedDocument) UnsetAttachmentUrl() {
	o.AttachmentUrl.Unset()
}

// GetAttachmentToken returns the AttachmentToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetAttachmentToken() string {
	if o == nil || IsNil(o.AttachmentToken.Get()) {
		var ret string
		return ret
	}
	return *o.AttachmentToken.Get()
}

// GetAttachmentTokenOk returns a tuple with the AttachmentToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetAttachmentTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AttachmentToken.Get(), o.AttachmentToken.IsSet()
}

// HasAttachmentToken returns a boolean if a field has been set.
func (o *IssuedDocument) HasAttachmentToken() bool {
	if o != nil && o.AttachmentToken.IsSet() {
		return true
	}

	return false
}

// SetAttachmentToken gets a reference to the given NullableString and assigns it to the AttachmentToken field.
func (o *IssuedDocument) SetAttachmentToken(v string) *IssuedDocument {
	o.AttachmentToken.Set(&v)
        return o
}
// SetAttachmentTokenNil sets the value for AttachmentToken to be an explicit nil
func (o *IssuedDocument) SetAttachmentTokenNil() *IssuedDocument {
	o.AttachmentToken.Set(nil)
    return o
}

// UnsetAttachmentToken ensures that no value is present for AttachmentToken, not even an explicit nil
func (o *IssuedDocument) UnsetAttachmentToken() {
	o.AttachmentToken.Unset()
}

// GetEiRaw returns the EiRaw field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetEiRaw() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.EiRaw
}

// GetEiRawOk returns a tuple with the EiRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetEiRawOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.EiRaw) {
		return map[string]interface{}{}, false
	}
	return o.EiRaw, true
}

// HasEiRaw returns a boolean if a field has been set.
func (o *IssuedDocument) HasEiRaw() bool {
	if o != nil && !IsNil(o.EiRaw) {
		return true
	}

	return false
}

// SetEiRaw gets a reference to the given map[string]interface{} and assigns it to the EiRaw field.
func (o *IssuedDocument) SetEiRaw(v map[string]interface{}) *IssuedDocument {
	o.EiRaw = v
        return o
}

// GetEiStatus returns the EiStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetEiStatus() string {
	if o == nil || IsNil(o.EiStatus.Get()) {
		var ret string
		return ret
	}
	return *o.EiStatus.Get()
}

// GetEiStatusOk returns a tuple with the EiStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetEiStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EiStatus.Get(), o.EiStatus.IsSet()
}

// HasEiStatus returns a boolean if a field has been set.
func (o *IssuedDocument) HasEiStatus() bool {
	if o != nil && o.EiStatus.IsSet() {
		return true
	}

	return false
}

// SetEiStatus gets a reference to the given NullableString and assigns it to the EiStatus field.
func (o *IssuedDocument) SetEiStatus(v string) *IssuedDocument {
	o.EiStatus.Set(&v)
        return o
}
// SetEiStatusNil sets the value for EiStatus to be an explicit nil
func (o *IssuedDocument) SetEiStatusNil() *IssuedDocument {
	o.EiStatus.Set(nil)
    return o
}

// UnsetEiStatus ensures that no value is present for EiStatus, not even an explicit nil
func (o *IssuedDocument) UnsetEiStatus() {
	o.EiStatus.Unset()
}

// GetLocked returns the Locked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetLocked() bool {
	if o == nil || IsNil(o.Locked.Get()) {
		var ret bool
		return ret
	}
	return *o.Locked.Get()
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetLockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locked.Get(), o.Locked.IsSet()
}

// HasLocked returns a boolean if a field has been set.
func (o *IssuedDocument) HasLocked() bool {
	if o != nil && o.Locked.IsSet() {
		return true
	}

	return false
}

// SetLocked gets a reference to the given NullableBool and assigns it to the Locked field.
func (o *IssuedDocument) SetLocked(v bool) *IssuedDocument {
	o.Locked.Set(&v)
        return o
}
// SetLockedNil sets the value for Locked to be an explicit nil
func (o *IssuedDocument) SetLockedNil() *IssuedDocument {
	o.Locked.Set(nil)
    return o
}

// UnsetLocked ensures that no value is present for Locked, not even an explicit nil
func (o *IssuedDocument) UnsetLocked() {
	o.Locked.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IssuedDocument) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given NullableString and assigns it to the CreatedAt field.
func (o *IssuedDocument) SetCreatedAt(v string) *IssuedDocument {
	o.CreatedAt.Set(&v)
        return o
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *IssuedDocument) SetCreatedAtNil() *IssuedDocument {
	o.CreatedAt.Set(nil)
    return o
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *IssuedDocument) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt.Get()) {
		var ret string
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IssuedDocument) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given NullableString and assigns it to the UpdatedAt field.
func (o *IssuedDocument) SetUpdatedAt(v string) *IssuedDocument {
	o.UpdatedAt.Set(&v)
        return o
}
// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *IssuedDocument) SetUpdatedAtNil() *IssuedDocument {
	o.UpdatedAt.Set(nil)
    return o
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *IssuedDocument) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

func (o IssuedDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssuedDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Number.IsSet() {
		toSerialize["number"] = o.Number.Get()
	}
	if o.Numeration.IsSet() {
		toSerialize["numeration"] = o.Numeration.Get()
	}
	if o.Date.IsSet() {
		toSerialize["date"] = o.Date.Get()
	}
	if o.Year.IsSet() {
		toSerialize["year"] = o.Year.Get()
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if o.Subject.IsSet() {
		toSerialize["subject"] = o.Subject.Get()
	}
	if o.VisibleSubject.IsSet() {
		toSerialize["visible_subject"] = o.VisibleSubject.Get()
	}
	if o.RcCenter.IsSet() {
		toSerialize["rc_center"] = o.RcCenter.Get()
	}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	if o.Rivalsa.IsSet() {
		toSerialize["rivalsa"] = o.Rivalsa.Get()
	}
	if o.Cassa.IsSet() {
		toSerialize["cassa"] = o.Cassa.Get()
	}
	if o.AmountCassa.IsSet() {
		toSerialize["amount_cassa"] = o.AmountCassa.Get()
	}
	if o.CassaTaxable.IsSet() {
		toSerialize["cassa_taxable"] = o.CassaTaxable.Get()
	}
	if o.AmountCassaTaxable.IsSet() {
		toSerialize["amount_cassa_taxable"] = o.AmountCassaTaxable.Get()
	}
	if o.Cassa2.IsSet() {
		toSerialize["cassa2"] = o.Cassa2.Get()
	}
	if o.AmountCassa2.IsSet() {
		toSerialize["amount_cassa2"] = o.AmountCassa2.Get()
	}
	if o.Cassa2Taxable.IsSet() {
		toSerialize["cassa2_taxable"] = o.Cassa2Taxable.Get()
	}
	if o.AmountCassa2Taxable.IsSet() {
		toSerialize["amount_cassa2_taxable"] = o.AmountCassa2Taxable.Get()
	}
	if o.GlobalCassaTaxable.IsSet() {
		toSerialize["global_cassa_taxable"] = o.GlobalCassaTaxable.Get()
	}
	if o.AmountGlobalCassaTaxable.IsSet() {
		toSerialize["amount_global_cassa_taxable"] = o.AmountGlobalCassaTaxable.Get()
	}
	if o.WithholdingTax.IsSet() {
		toSerialize["withholding_tax"] = o.WithholdingTax.Get()
	}
	if o.WithholdingTaxTaxable.IsSet() {
		toSerialize["withholding_tax_taxable"] = o.WithholdingTaxTaxable.Get()
	}
	if o.OtherWithholdingTax.IsSet() {
		toSerialize["other_withholding_tax"] = o.OtherWithholdingTax.Get()
	}
	if o.StampDuty.IsSet() {
		toSerialize["stamp_duty"] = o.StampDuty.Get()
	}
	if !IsNil(o.PaymentMethod) {
		toSerialize["payment_method"] = o.PaymentMethod
	}
	if o.UseSplitPayment.IsSet() {
		toSerialize["use_split_payment"] = o.UseSplitPayment.Get()
	}
	if o.UseGrossPrices.IsSet() {
		toSerialize["use_gross_prices"] = o.UseGrossPrices.Get()
	}
	if o.EInvoice.IsSet() {
		toSerialize["e_invoice"] = o.EInvoice.Get()
	}
	if o.EiData.IsSet() {
		toSerialize["ei_data"] = o.EiData.Get()
	}
	if o.EiCassaType.IsSet() {
		toSerialize["ei_cassa_type"] = o.EiCassaType.Get()
	}
	if o.EiCassa2Type.IsSet() {
		toSerialize["ei_cassa2_type"] = o.EiCassa2Type.Get()
	}
	if o.EiWithholdingTaxCausal.IsSet() {
		toSerialize["ei_withholding_tax_causal"] = o.EiWithholdingTaxCausal.Get()
	}
	if o.EiOtherWithholdingTaxType.IsSet() {
		toSerialize["ei_other_withholding_tax_type"] = o.EiOtherWithholdingTaxType.Get()
	}
	if o.EiOtherWithholdingTaxCausal.IsSet() {
		toSerialize["ei_other_withholding_tax_causal"] = o.EiOtherWithholdingTaxCausal.Get()
	}
	if o.ItemsList != nil {
		toSerialize["items_list"] = o.ItemsList
	}
	if o.PaymentsList != nil {
		toSerialize["payments_list"] = o.PaymentsList
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !IsNil(o.DeliveryNoteTemplate) {
		toSerialize["delivery_note_template"] = o.DeliveryNoteTemplate
	}
	if !IsNil(o.AccInvTemplate) {
		toSerialize["acc_inv_template"] = o.AccInvTemplate
	}
	if o.HMargins.IsSet() {
		toSerialize["h_margins"] = o.HMargins.Get()
	}
	if o.VMargins.IsSet() {
		toSerialize["v_margins"] = o.VMargins.Get()
	}
	if o.ShowPayments.IsSet() {
		toSerialize["show_payments"] = o.ShowPayments.Get()
	}
	if o.ShowPaymentMethod.IsSet() {
		toSerialize["show_payment_method"] = o.ShowPaymentMethod.Get()
	}
	if !IsNil(o.ShowTotals) {
		toSerialize["show_totals"] = o.ShowTotals
	}
	if o.ShowNotificationButton.IsSet() {
		toSerialize["show_notification_button"] = o.ShowNotificationButton.Get()
	}
	if o.ShowTspayButton.IsSet() {
		toSerialize["show_tspay_button"] = o.ShowTspayButton.Get()
	}
	if o.DeliveryNote.IsSet() {
		toSerialize["delivery_note"] = o.DeliveryNote.Get()
	}
	if o.AccompanyingInvoice.IsSet() {
		toSerialize["accompanying_invoice"] = o.AccompanyingInvoice.Get()
	}
	if o.DnNumber.IsSet() {
		toSerialize["dn_number"] = o.DnNumber.Get()
	}
	if o.DnDate.IsSet() {
		toSerialize["dn_date"] = o.DnDate.Get()
	}
	if o.DnAiPackagesNumber.IsSet() {
		toSerialize["dn_ai_packages_number"] = o.DnAiPackagesNumber.Get()
	}
	if o.DnAiWeight.IsSet() {
		toSerialize["dn_ai_weight"] = o.DnAiWeight.Get()
	}
	if o.DnAiCausal.IsSet() {
		toSerialize["dn_ai_causal"] = o.DnAiCausal.Get()
	}
	if o.DnAiDestination.IsSet() {
		toSerialize["dn_ai_destination"] = o.DnAiDestination.Get()
	}
	if o.DnAiTransporter.IsSet() {
		toSerialize["dn_ai_transporter"] = o.DnAiTransporter.Get()
	}
	if o.DnAiNotes.IsSet() {
		toSerialize["dn_ai_notes"] = o.DnAiNotes.Get()
	}
	if o.IsMarked.IsSet() {
		toSerialize["is_marked"] = o.IsMarked.Get()
	}
	if o.AmountNet.IsSet() {
		toSerialize["amount_net"] = o.AmountNet.Get()
	}
	if o.AmountVat.IsSet() {
		toSerialize["amount_vat"] = o.AmountVat.Get()
	}
	if o.AmountGross.IsSet() {
		toSerialize["amount_gross"] = o.AmountGross.Get()
	}
	if o.AmountDueDiscount.IsSet() {
		toSerialize["amount_due_discount"] = o.AmountDueDiscount.Get()
	}
	if o.AmountRivalsa.IsSet() {
		toSerialize["amount_rivalsa"] = o.AmountRivalsa.Get()
	}
	if o.AmountRivalsaTaxable.IsSet() {
		toSerialize["amount_rivalsa_taxable"] = o.AmountRivalsaTaxable.Get()
	}
	if o.AmountWithholdingTax.IsSet() {
		toSerialize["amount_withholding_tax"] = o.AmountWithholdingTax.Get()
	}
	if o.AmountWithholdingTaxTaxable.IsSet() {
		toSerialize["amount_withholding_tax_taxable"] = o.AmountWithholdingTaxTaxable.Get()
	}
	if o.AmountOtherWithholdingTax.IsSet() {
		toSerialize["amount_other_withholding_tax"] = o.AmountOtherWithholdingTax.Get()
	}
	if o.AmountOtherWithholdingTaxTaxable.IsSet() {
		toSerialize["amount_other_withholding_tax_taxable"] = o.AmountOtherWithholdingTaxTaxable.Get()
	}
	if o.AmountEnasarcoTaxable.IsSet() {
		toSerialize["amount_enasarco_taxable"] = o.AmountEnasarcoTaxable.Get()
	}
	if o.ExtraData.IsSet() {
		toSerialize["extra_data"] = o.ExtraData.Get()
	}
	if o.SeenDate.IsSet() {
		toSerialize["seen_date"] = o.SeenDate.Get()
	}
	if o.NextDueDate.IsSet() {
		toSerialize["next_due_date"] = o.NextDueDate.Get()
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if o.DnUrl.IsSet() {
		toSerialize["dn_url"] = o.DnUrl.Get()
	}
	if o.AiUrl.IsSet() {
		toSerialize["ai_url"] = o.AiUrl.Get()
	}
	if o.AttachmentUrl.IsSet() {
		toSerialize["attachment_url"] = o.AttachmentUrl.Get()
	}
	if o.AttachmentToken.IsSet() {
		toSerialize["attachment_token"] = o.AttachmentToken.Get()
	}
	if o.EiRaw != nil {
		toSerialize["ei_raw"] = o.EiRaw
	}
	if o.EiStatus.IsSet() {
		toSerialize["ei_status"] = o.EiStatus.Get()
	}
	if o.Locked.IsSet() {
		toSerialize["locked"] = o.Locked.Get()
	}
	if o.CreatedAt.IsSet() {
		toSerialize["created_at"] = o.CreatedAt.Get()
	}
	if o.UpdatedAt.IsSet() {
		toSerialize["updated_at"] = o.UpdatedAt.Get()
	}
	return toSerialize, nil
}

type NullableIssuedDocument struct {
	value *IssuedDocument
	isSet bool
}

func (v NullableIssuedDocument) Get() *IssuedDocument {
	return v.value
}

func (v *NullableIssuedDocument) Set(val *IssuedDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuedDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuedDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuedDocument(val *IssuedDocument) *NullableIssuedDocument {
	return &NullableIssuedDocument{value: val, isSet: true}
}

func (v NullableIssuedDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuedDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


