/*
Fatture in Cloud API v2 - API Reference

Testing TaxesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fattureincloud

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    fattureincloud "./openapi"
)

func Test_fattureincloud_TaxesApiService(t *testing.T) {

    configuration := fattureincloud.NewConfiguration()
    apiClient := fattureincloud.NewAPIClient(configuration)

    t.Run("Test TaxesApiService CreateF24", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.TaxesApi.CreateF24(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TaxesApiService DeleteF24", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var documentId int32

        resp, httpRes, err := apiClient.TaxesApi.DeleteF24(context.Background(), companyId, documentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TaxesApiService DeleteF24Attachment", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var documentId int32

        resp, httpRes, err := apiClient.TaxesApi.DeleteF24Attachment(context.Background(), companyId, documentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TaxesApiService GetF24", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var documentId int32

        resp, httpRes, err := apiClient.TaxesApi.GetF24(context.Background(), companyId, documentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TaxesApiService ListF24", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.TaxesApi.ListF24(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TaxesApiService ModifyF24", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32
        var documentId int32

        resp, httpRes, err := apiClient.TaxesApi.ModifyF24(context.Background(), companyId, documentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test TaxesApiService UploadF24Attachment", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.TaxesApi.UploadF24Attachment(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
