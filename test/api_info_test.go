/*
Fatture in Cloud API v2 - API Reference

Testing InfoApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fattureincloud

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    fattureincloud "./openapi"
)

func Test_fattureincloud_InfoApiService(t *testing.T) {

    configuration := fattureincloud.NewConfiguration()
    apiClient := fattureincloud.NewAPIClient(configuration)

    t.Run("Test InfoApiService ListArchiveCategories", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.InfoApi.ListArchiveCategories(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InfoApiService ListCities", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.InfoApi.ListCities(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InfoApiService ListCostCenters", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.InfoApi.ListCostCenters(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InfoApiService ListCountries", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.InfoApi.ListCountries(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InfoApiService ListCurrencies", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.InfoApi.ListCurrencies(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InfoApiService ListDeliveryNotesDefaultCausals", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.InfoApi.ListDeliveryNotesDefaultCausals(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InfoApiService ListDetailedCountries", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.InfoApi.ListDetailedCountries(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InfoApiService ListLanguages", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.InfoApi.ListLanguages(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InfoApiService ListPaymentAccounts", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.InfoApi.ListPaymentAccounts(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InfoApiService ListPaymentMethods", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.InfoApi.ListPaymentMethods(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InfoApiService ListProductCategories", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.InfoApi.ListProductCategories(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InfoApiService ListReceivedDocumentCategories", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.InfoApi.ListReceivedDocumentCategories(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InfoApiService ListRevenueCenters", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.InfoApi.ListRevenueCenters(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InfoApiService ListTemplates", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.InfoApi.ListTemplates(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InfoApiService ListUnitsOfMeasure", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.InfoApi.ListUnitsOfMeasure(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InfoApiService ListVatTypes", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var companyId int32

        resp, httpRes, err := apiClient.InfoApi.ListVatTypes(context.Background(), companyId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
