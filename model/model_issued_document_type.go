/*
Fatture in Cloud API v2 - API Reference

Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.

API version: 2.0.29
Contact: info@fattureincloud.it
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

// IssuedDocumentType Issued document type
type IssuedDocumentType string

// List of IssuedDocumentType
var IssuedDocumentTypes = struct {
	INVOICE IssuedDocumentType
	QUOTE IssuedDocumentType
	PROFORMA IssuedDocumentType
	RECEIPT IssuedDocumentType
	DELIVERY_NOTE IssuedDocumentType
	CREDIT_NOTE IssuedDocumentType
	ORDER IssuedDocumentType
	WORK_REPORT IssuedDocumentType
	SUPPLIER_ORDER IssuedDocumentType
	SELF_OWN_INVOICE IssuedDocumentType
	SELF_SUPPLIER_INVOICE IssuedDocumentType
} {
	INVOICE: "invoice",
	QUOTE: "quote",
	PROFORMA: "proforma",
	RECEIPT: "receipt",
	DELIVERY_NOTE: "delivery_note",
	CREDIT_NOTE: "credit_note",
	ORDER: "order",
	WORK_REPORT: "work_report",
	SUPPLIER_ORDER: "supplier_order",
	SELF_OWN_INVOICE: "self_own_invoice",
	SELF_SUPPLIER_INVOICE: "self_supplier_invoice",
}

// All allowed values of IssuedDocumentType enum
var AllowedIssuedDocumentTypeEnumValues = []IssuedDocumentType{
	"invoice",
	"quote",
	"proforma",
	"receipt",
	"delivery_note",
	"credit_note",
	"order",
	"work_report",
	"supplier_order",
	"self_own_invoice",
	"self_supplier_invoice",
}

func (v *IssuedDocumentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IssuedDocumentType(value)
	for _, existing := range AllowedIssuedDocumentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IssuedDocumentType", value)
}

// NewIssuedDocumentTypeFromValue returns a pointer to a valid IssuedDocumentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIssuedDocumentTypeFromValue(v string) (*IssuedDocumentType, error) {
	ev := IssuedDocumentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IssuedDocumentType: valid values are %v", v, AllowedIssuedDocumentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IssuedDocumentType) IsValid() bool {
	for _, existing := range AllowedIssuedDocumentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IssuedDocumentType value
func (v IssuedDocumentType) Ptr() *IssuedDocumentType {
	return &v
}

type NullableIssuedDocumentType struct {
	value *IssuedDocumentType
	isSet bool
}

func (v NullableIssuedDocumentType) Get() *IssuedDocumentType {
	return v.value
}

func (v *NullableIssuedDocumentType) Set(val *IssuedDocumentType) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuedDocumentType) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuedDocumentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuedDocumentType(val *IssuedDocumentType) *NullableIssuedDocumentType {
	return &NullableIssuedDocumentType{value: val, isSet: true}
}

func (v NullableIssuedDocumentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuedDocumentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

